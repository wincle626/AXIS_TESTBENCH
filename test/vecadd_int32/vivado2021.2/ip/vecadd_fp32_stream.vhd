-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vecadd_fp32_stream is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputs_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs_TVALID : IN STD_LOGIC;
    inputs_TREADY : OUT STD_LOGIC;
    outputs_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputs_TVALID : OUT STD_LOGIC;
    outputs_TREADY : IN STD_LOGIC );
end;


architecture behav of vecadd_fp32_stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vecadd_fp32_stream_vecadd_fp32_stream,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.693000,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=271,HLS_SYN_LUT=436,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_done : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_idle : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_ready : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_inputs_TREADY : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_ce0 : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_we0 : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_ce0 : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_we0 : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vecadd_fp32_fu_52_ap_start : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_ap_done : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_ap_idle : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_ap_ready : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vecadd_fp32_fu_52_a_ce0 : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vecadd_fp32_fu_52_b_ce0 : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_c_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vecadd_fp32_fu_52_c_ce0 : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_c_we0 : STD_LOGIC;
    signal grp_vecadd_fp32_fu_52_c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_done : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_idle : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_ready : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TREADY : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_ce0 : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TVALID : STD_LOGIC;
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_vecadd_fp32_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal regslice_both_outputs_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal regslice_both_inputs_U_apdone_blk : STD_LOGIC;
    signal inputs_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs_TVALID_int_regslice : STD_LOGIC;
    signal inputs_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_inputs_U_ack_in : STD_LOGIC;
    signal outputs_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outputs_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component vecadd_fp32_stream_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputs_TVALID : IN STD_LOGIC;
        inputs_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_TREADY : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_we0 : OUT STD_LOGIC;
        b_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vecadd_fp32_stream_vecadd_fp32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vecadd_fp32_stream_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_TREADY : IN STD_LOGIC;
        c_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs_TVALID : OUT STD_LOGIC );
    end component;


    component vecadd_fp32_stream_a_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vecadd_fp32_stream_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    a_U : component vecadd_fp32_stream_a_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_d0,
        q0 => a_q0);

    b_U : component vecadd_fp32_stream_a_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_d0,
        q0 => b_q0);

    c_U : component vecadd_fp32_stream_a_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => grp_vecadd_fp32_fu_52_c_d0,
        q0 => c_q0);

    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44 : component vecadd_fp32_stream_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start,
        ap_done => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_done,
        ap_idle => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_idle,
        ap_ready => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_ready,
        inputs_TVALID => inputs_TVALID_int_regslice,
        inputs_TDATA => inputs_TDATA_int_regslice,
        inputs_TREADY => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_inputs_TREADY,
        a_address0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_address0,
        a_ce0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_ce0,
        a_we0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_we0,
        a_d0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_d0,
        b_address0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_address0,
        b_ce0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_ce0,
        b_we0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_we0,
        b_d0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_d0);

    grp_vecadd_fp32_fu_52 : component vecadd_fp32_stream_vecadd_fp32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_vecadd_fp32_fu_52_ap_start,
        ap_done => grp_vecadd_fp32_fu_52_ap_done,
        ap_idle => grp_vecadd_fp32_fu_52_ap_idle,
        ap_ready => grp_vecadd_fp32_fu_52_ap_ready,
        a_address0 => grp_vecadd_fp32_fu_52_a_address0,
        a_ce0 => grp_vecadd_fp32_fu_52_a_ce0,
        a_q0 => a_q0,
        b_address0 => grp_vecadd_fp32_fu_52_b_address0,
        b_ce0 => grp_vecadd_fp32_fu_52_b_ce0,
        b_q0 => b_q0,
        c_address0 => grp_vecadd_fp32_fu_52_c_address0,
        c_ce0 => grp_vecadd_fp32_fu_52_c_ce0,
        c_we0 => grp_vecadd_fp32_fu_52_c_we0,
        c_d0 => grp_vecadd_fp32_fu_52_c_d0);

    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59 : component vecadd_fp32_stream_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start,
        ap_done => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_done,
        ap_idle => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_idle,
        ap_ready => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_ready,
        outputs_TREADY => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TREADY,
        c_address0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_address0,
        c_ce0 => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_ce0,
        c_q0 => c_q0,
        outputs_TDATA => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TDATA,
        outputs_TVALID => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TVALID);

    regslice_both_inputs_U : component vecadd_fp32_stream_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputs_TDATA,
        vld_in => inputs_TVALID,
        ack_in => regslice_both_inputs_U_ack_in,
        data_out => inputs_TDATA_int_regslice,
        vld_out => inputs_TVALID_int_regslice,
        ack_out => inputs_TREADY_int_regslice,
        apdone_blk => regslice_both_inputs_U_apdone_blk);

    regslice_both_outputs_U : component vecadd_fp32_stream_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TDATA,
        vld_in => grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TVALID,
        ack_in => outputs_TREADY_int_regslice,
        data_out => outputs_TDATA,
        vld_out => regslice_both_outputs_U_vld_out,
        ack_out => outputs_TREADY,
        apdone_blk => regslice_both_outputs_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_vecadd_fp32_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_vecadd_fp32_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_vecadd_fp32_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vecadd_fp32_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_vecadd_fp32_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_done, grp_vecadd_fp32_fu_52_ap_done, grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, regslice_both_outputs_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_vecadd_fp32_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (regslice_both_outputs_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_address0, grp_vecadd_fp32_fu_52_a_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= grp_vecadd_fp32_fu_52_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_address0;
        else 
            a_address0 <= "XXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_ce0, grp_vecadd_fp32_fu_52_a_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_ce0 <= grp_vecadd_fp32_fu_52_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_we0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_a_we0;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_done)
    begin
        if ((grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_vecadd_fp32_fu_52_ap_done)
    begin
        if ((grp_vecadd_fp32_fu_52_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_done)
    begin
        if ((grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(regslice_both_outputs_U_apdone_blk)
    begin
        if ((regslice_both_outputs_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, regslice_both_outputs_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (regslice_both_outputs_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state8, regslice_both_outputs_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (regslice_both_outputs_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_address0_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_address0, grp_vecadd_fp32_fu_52_b_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= grp_vecadd_fp32_fu_52_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_address0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_address0;
        else 
            b_address0 <= "XXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_ce0, grp_vecadd_fp32_fu_52_b_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_ce0 <= grp_vecadd_fp32_fu_52_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_ce0;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_we0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_b_we0;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(grp_vecadd_fp32_fu_52_c_address0, grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_address0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= grp_vecadd_fp32_fu_52_c_address0;
        else 
            c_address0 <= "XXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(grp_vecadd_fp32_fu_52_c_ce0, grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_ce0 <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_c_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_ce0 <= grp_vecadd_fp32_fu_52_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we0_assign_proc : process(grp_vecadd_fp32_fu_52_c_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_we0 <= grp_vecadd_fp32_fu_52_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_vecadd_fp32_fu_52_ap_start <= grp_vecadd_fp32_fu_52_ap_start_reg;
    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_ap_start_reg;
    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_ap_start_reg;
    grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_19_2_fu_59_outputs_TREADY <= (outputs_TREADY_int_regslice and ap_CS_fsm_state7);
    inputs_TREADY <= regslice_both_inputs_U_ack_in;

    inputs_TREADY_int_regslice_assign_proc : process(grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_inputs_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputs_TREADY_int_regslice <= grp_vecadd_fp32_stream_Pipeline_VITIS_LOOP_10_1_fu_44_inputs_TREADY;
        else 
            inputs_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    outputs_TVALID <= regslice_both_outputs_U_vld_out;
end behav;
