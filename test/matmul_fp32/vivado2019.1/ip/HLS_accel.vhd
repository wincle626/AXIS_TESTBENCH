-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_accel,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.563000,HLS_SYN_LAT=138,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=2536,HLS_SYN_LUT=2626,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal INPUT_STREAM_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_data_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_data_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_data_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_data_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_data_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_keep_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_keep_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_keep_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_strb_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_strb_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_strb_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_user_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_user_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal INPUT_STREAM_user_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_user_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_user_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_user_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_last_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_last_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_last_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_last_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_last_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_STREAM_id_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_STREAM_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_STREAM_id_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_id_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_id_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_id_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_STREAM_dest_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_STREAM_dest_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_STREAM_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_dest_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_dest_V_0_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_data_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_data_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_keep_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_keep_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_keep_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_strb_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_strb_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_strb_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_user_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_user_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_user_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_user_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_user_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_last_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_id_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_id_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_id_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_id_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_id_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_dest_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_dest_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_dest_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_dest_V_1_state_cmp_full : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_ap_start : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_ap_done : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_ap_idle : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_ap_ready : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_wrapped_mmult_hw_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component wrapped_mmult_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_wrapped_mmult_hw_fu_48 : component wrapped_mmult_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_wrapped_mmult_hw_fu_48_ap_start,
        ap_done => grp_wrapped_mmult_hw_fu_48_ap_done,
        ap_idle => grp_wrapped_mmult_hw_fu_48_ap_idle,
        ap_ready => grp_wrapped_mmult_hw_fu_48_ap_ready,
        INPUT_STREAM_TDATA => INPUT_STREAM_data_V_0_data_out,
        INPUT_STREAM_TVALID => grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_keep_V_0_data_out,
        INPUT_STREAM_TSTRB => INPUT_STREAM_strb_V_0_data_out,
        INPUT_STREAM_TUSER => INPUT_STREAM_user_V_0_data_out,
        INPUT_STREAM_TLAST => INPUT_STREAM_last_V_0_data_out,
        INPUT_STREAM_TID => INPUT_STREAM_id_V_0_data_out,
        INPUT_STREAM_TDEST => INPUT_STREAM_dest_V_0_data_out,
        OUTPUT_STREAM_TDATA => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDEST);





    INPUT_STREAM_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out))) then 
                                        INPUT_STREAM_data_V_0_sel_rd <= not(INPUT_STREAM_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in))) then 
                                        INPUT_STREAM_data_V_0_sel_wr <= not(INPUT_STREAM_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out)))) then 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in)))) then 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_data_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in)))) then 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_out))) then 
                                        INPUT_STREAM_dest_V_0_sel_rd <= not(INPUT_STREAM_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in))) then 
                                        INPUT_STREAM_dest_V_0_sel_wr <= not(INPUT_STREAM_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out)))) then 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in)))) then 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_dest_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in)))) then 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_vld_out))) then 
                                        INPUT_STREAM_id_V_0_sel_rd <= not(INPUT_STREAM_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_id_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_vld_in))) then 
                                        INPUT_STREAM_id_V_0_sel_wr <= not(INPUT_STREAM_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_id_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_id_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_id_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_id_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_ack_out)))) then 
                    INPUT_STREAM_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_id_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_id_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_id_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_vld_in)))) then 
                    INPUT_STREAM_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_id_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_id_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_id_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_id_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_id_V_0_vld_in)))) then 
                    INPUT_STREAM_id_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_keep_V_0_vld_out) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_ack_out))) then 
                                        INPUT_STREAM_keep_V_0_sel_rd <= not(INPUT_STREAM_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_keep_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_vld_in))) then 
                                        INPUT_STREAM_keep_V_0_sel_wr <= not(INPUT_STREAM_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_keep_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_keep_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_keep_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_keep_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_ack_out)))) then 
                    INPUT_STREAM_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_keep_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_keep_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_keep_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_vld_in)))) then 
                    INPUT_STREAM_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_keep_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_keep_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_keep_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_keep_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_keep_V_0_vld_in)))) then 
                    INPUT_STREAM_keep_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_vld_out))) then 
                                        INPUT_STREAM_last_V_0_sel_rd <= not(INPUT_STREAM_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_last_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_vld_in))) then 
                                        INPUT_STREAM_last_V_0_sel_wr <= not(INPUT_STREAM_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_last_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_last_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_last_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_ack_out)))) then 
                    INPUT_STREAM_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_last_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_last_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_last_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_vld_in)))) then 
                    INPUT_STREAM_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_last_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_last_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_last_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_last_V_0_vld_in)))) then 
                    INPUT_STREAM_last_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_vld_out))) then 
                                        INPUT_STREAM_strb_V_0_sel_rd <= not(INPUT_STREAM_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_strb_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_vld_in))) then 
                                        INPUT_STREAM_strb_V_0_sel_wr <= not(INPUT_STREAM_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_strb_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_strb_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_strb_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_strb_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_ack_out)))) then 
                    INPUT_STREAM_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_strb_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_strb_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_strb_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_vld_in)))) then 
                    INPUT_STREAM_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_strb_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_strb_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_strb_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_strb_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_strb_V_0_vld_in)))) then 
                    INPUT_STREAM_strb_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_vld_out))) then 
                                        INPUT_STREAM_user_V_0_sel_rd <= not(INPUT_STREAM_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_user_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_vld_in))) then 
                                        INPUT_STREAM_user_V_0_sel_wr <= not(INPUT_STREAM_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_user_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_user_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_user_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_user_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_ack_out)))) then 
                    INPUT_STREAM_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_user_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_user_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_user_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_vld_in)))) then 
                    INPUT_STREAM_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_user_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_user_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_user_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_user_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_user_V_0_vld_in)))) then 
                    INPUT_STREAM_user_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_out))) then 
                                        OUTPUT_STREAM_data_V_1_sel_rd <= not(OUTPUT_STREAM_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in))) then 
                                        OUTPUT_STREAM_data_V_1_sel_wr <= not(OUTPUT_STREAM_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out)))) then 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in)))) then 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in)))) then 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_out))) then 
                                        OUTPUT_STREAM_dest_V_1_sel_rd <= not(OUTPUT_STREAM_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in))) then 
                                        OUTPUT_STREAM_dest_V_1_sel_wr <= not(OUTPUT_STREAM_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out)))) then 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in)))) then 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in)))) then 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_out))) then 
                                        OUTPUT_STREAM_id_V_1_sel_rd <= not(OUTPUT_STREAM_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in))) then 
                                        OUTPUT_STREAM_id_V_1_sel_wr <= not(OUTPUT_STREAM_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out)))) then 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in)))) then 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in)))) then 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_out))) then 
                                        OUTPUT_STREAM_keep_V_1_sel_rd <= not(OUTPUT_STREAM_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in))) then 
                                        OUTPUT_STREAM_keep_V_1_sel_wr <= not(OUTPUT_STREAM_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out)))) then 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in)))) then 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in)))) then 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_out))) then 
                                        OUTPUT_STREAM_last_V_1_sel_rd <= not(OUTPUT_STREAM_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in))) then 
                                        OUTPUT_STREAM_last_V_1_sel_wr <= not(OUTPUT_STREAM_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out)))) then 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in)))) then 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in)))) then 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_out))) then 
                                        OUTPUT_STREAM_strb_V_1_sel_rd <= not(OUTPUT_STREAM_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in))) then 
                                        OUTPUT_STREAM_strb_V_1_sel_wr <= not(OUTPUT_STREAM_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out)))) then 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in)))) then 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in)))) then 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_out))) then 
                                        OUTPUT_STREAM_user_V_1_sel_rd <= not(OUTPUT_STREAM_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in))) then 
                                        OUTPUT_STREAM_user_V_1_sel_wr <= not(OUTPUT_STREAM_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out)))) then 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in)))) then 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in)))) then 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_wrapped_mmult_hw_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_wrapped_mmult_hw_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_wrapped_mmult_hw_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_wrapped_mmult_hw_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_wrapped_mmult_hw_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_data_V_0_load_A)) then
                INPUT_STREAM_data_V_0_payload_A <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_data_V_0_load_B)) then
                INPUT_STREAM_data_V_0_payload_B <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_dest_V_0_load_A)) then
                INPUT_STREAM_dest_V_0_payload_A <= INPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_dest_V_0_load_B)) then
                INPUT_STREAM_dest_V_0_payload_B <= INPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_id_V_0_load_A)) then
                INPUT_STREAM_id_V_0_payload_A <= INPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_id_V_0_load_B)) then
                INPUT_STREAM_id_V_0_payload_B <= INPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_keep_V_0_load_A)) then
                INPUT_STREAM_keep_V_0_payload_A <= INPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_keep_V_0_load_B)) then
                INPUT_STREAM_keep_V_0_payload_B <= INPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_last_V_0_load_A)) then
                INPUT_STREAM_last_V_0_payload_A <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_last_V_0_load_B)) then
                INPUT_STREAM_last_V_0_payload_B <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_strb_V_0_load_A)) then
                INPUT_STREAM_strb_V_0_payload_A <= INPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_strb_V_0_load_B)) then
                INPUT_STREAM_strb_V_0_payload_B <= INPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_user_V_0_load_A)) then
                INPUT_STREAM_user_V_0_payload_A <= INPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_user_V_0_load_B)) then
                INPUT_STREAM_user_V_0_payload_B <= INPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_load_A)) then
                OUTPUT_STREAM_data_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_load_B)) then
                OUTPUT_STREAM_data_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_load_A)) then
                OUTPUT_STREAM_dest_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_load_B)) then
                OUTPUT_STREAM_dest_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_id_V_1_load_A)) then
                OUTPUT_STREAM_id_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_id_V_1_load_B)) then
                OUTPUT_STREAM_id_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_load_A)) then
                OUTPUT_STREAM_keep_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_load_B)) then
                OUTPUT_STREAM_keep_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_load_A)) then
                OUTPUT_STREAM_last_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_load_B)) then
                OUTPUT_STREAM_last_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_load_A)) then
                OUTPUT_STREAM_strb_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_load_B)) then
                OUTPUT_STREAM_strb_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_user_V_1_load_A)) then
                OUTPUT_STREAM_user_V_1_payload_A <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_user_V_1_load_B)) then
                OUTPUT_STREAM_user_V_1_payload_B <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, OUTPUT_STREAM_TREADY, OUTPUT_STREAM_data_V_1_state, OUTPUT_STREAM_keep_V_1_state, OUTPUT_STREAM_strb_V_1_state, OUTPUT_STREAM_user_V_1_state, OUTPUT_STREAM_last_V_1_state, OUTPUT_STREAM_id_V_1_state, OUTPUT_STREAM_dest_V_1_state, grp_wrapped_mmult_hw_fu_48_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_wrapped_mmult_hw_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    INPUT_STREAM_TREADY <= INPUT_STREAM_dest_V_0_state(1);
    INPUT_STREAM_data_V_0_ack_in <= INPUT_STREAM_data_V_0_state(1);

    INPUT_STREAM_data_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_data_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_data_V_0_data_out_assign_proc : process(INPUT_STREAM_data_V_0_payload_A, INPUT_STREAM_data_V_0_payload_B, INPUT_STREAM_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_data_V_0_sel)) then 
            INPUT_STREAM_data_V_0_data_out <= INPUT_STREAM_data_V_0_payload_B;
        else 
            INPUT_STREAM_data_V_0_data_out <= INPUT_STREAM_data_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_data_V_0_load_A <= (not(INPUT_STREAM_data_V_0_sel_wr) and INPUT_STREAM_data_V_0_state_cmp_full);
    INPUT_STREAM_data_V_0_load_B <= (INPUT_STREAM_data_V_0_state_cmp_full and INPUT_STREAM_data_V_0_sel_wr);
    INPUT_STREAM_data_V_0_sel <= INPUT_STREAM_data_V_0_sel_rd;
    INPUT_STREAM_data_V_0_state_cmp_full <= '0' when (INPUT_STREAM_data_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_data_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_data_V_0_vld_out <= INPUT_STREAM_data_V_0_state(0);
    INPUT_STREAM_dest_V_0_ack_in <= INPUT_STREAM_dest_V_0_state(1);

    INPUT_STREAM_dest_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_dest_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_dest_V_0_data_out_assign_proc : process(INPUT_STREAM_dest_V_0_payload_A, INPUT_STREAM_dest_V_0_payload_B, INPUT_STREAM_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_dest_V_0_sel)) then 
            INPUT_STREAM_dest_V_0_data_out <= INPUT_STREAM_dest_V_0_payload_B;
        else 
            INPUT_STREAM_dest_V_0_data_out <= INPUT_STREAM_dest_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_dest_V_0_load_A <= (not(INPUT_STREAM_dest_V_0_sel_wr) and INPUT_STREAM_dest_V_0_state_cmp_full);
    INPUT_STREAM_dest_V_0_load_B <= (INPUT_STREAM_dest_V_0_state_cmp_full and INPUT_STREAM_dest_V_0_sel_wr);
    INPUT_STREAM_dest_V_0_sel <= INPUT_STREAM_dest_V_0_sel_rd;
    INPUT_STREAM_dest_V_0_state_cmp_full <= '0' when (INPUT_STREAM_dest_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_dest_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_dest_V_0_vld_out <= INPUT_STREAM_dest_V_0_state(0);
    INPUT_STREAM_id_V_0_ack_in <= INPUT_STREAM_id_V_0_state(1);

    INPUT_STREAM_id_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_id_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_id_V_0_data_out_assign_proc : process(INPUT_STREAM_id_V_0_payload_A, INPUT_STREAM_id_V_0_payload_B, INPUT_STREAM_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_id_V_0_sel)) then 
            INPUT_STREAM_id_V_0_data_out <= INPUT_STREAM_id_V_0_payload_B;
        else 
            INPUT_STREAM_id_V_0_data_out <= INPUT_STREAM_id_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_id_V_0_load_A <= (not(INPUT_STREAM_id_V_0_sel_wr) and INPUT_STREAM_id_V_0_state_cmp_full);
    INPUT_STREAM_id_V_0_load_B <= (INPUT_STREAM_id_V_0_state_cmp_full and INPUT_STREAM_id_V_0_sel_wr);
    INPUT_STREAM_id_V_0_sel <= INPUT_STREAM_id_V_0_sel_rd;
    INPUT_STREAM_id_V_0_state_cmp_full <= '0' when (INPUT_STREAM_id_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_id_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_id_V_0_vld_out <= INPUT_STREAM_id_V_0_state(0);
    INPUT_STREAM_keep_V_0_ack_in <= INPUT_STREAM_keep_V_0_state(1);

    INPUT_STREAM_keep_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_keep_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_keep_V_0_data_out_assign_proc : process(INPUT_STREAM_keep_V_0_payload_A, INPUT_STREAM_keep_V_0_payload_B, INPUT_STREAM_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_keep_V_0_sel)) then 
            INPUT_STREAM_keep_V_0_data_out <= INPUT_STREAM_keep_V_0_payload_B;
        else 
            INPUT_STREAM_keep_V_0_data_out <= INPUT_STREAM_keep_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_keep_V_0_load_A <= (not(INPUT_STREAM_keep_V_0_sel_wr) and INPUT_STREAM_keep_V_0_state_cmp_full);
    INPUT_STREAM_keep_V_0_load_B <= (INPUT_STREAM_keep_V_0_state_cmp_full and INPUT_STREAM_keep_V_0_sel_wr);
    INPUT_STREAM_keep_V_0_sel <= INPUT_STREAM_keep_V_0_sel_rd;
    INPUT_STREAM_keep_V_0_state_cmp_full <= '0' when (INPUT_STREAM_keep_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_keep_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_keep_V_0_vld_out <= INPUT_STREAM_keep_V_0_state(0);
    INPUT_STREAM_last_V_0_ack_in <= INPUT_STREAM_last_V_0_state(1);

    INPUT_STREAM_last_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_last_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_last_V_0_data_out_assign_proc : process(INPUT_STREAM_last_V_0_payload_A, INPUT_STREAM_last_V_0_payload_B, INPUT_STREAM_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_last_V_0_sel)) then 
            INPUT_STREAM_last_V_0_data_out <= INPUT_STREAM_last_V_0_payload_B;
        else 
            INPUT_STREAM_last_V_0_data_out <= INPUT_STREAM_last_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_last_V_0_load_A <= (not(INPUT_STREAM_last_V_0_sel_wr) and INPUT_STREAM_last_V_0_state_cmp_full);
    INPUT_STREAM_last_V_0_load_B <= (INPUT_STREAM_last_V_0_state_cmp_full and INPUT_STREAM_last_V_0_sel_wr);
    INPUT_STREAM_last_V_0_sel <= INPUT_STREAM_last_V_0_sel_rd;
    INPUT_STREAM_last_V_0_state_cmp_full <= '0' when (INPUT_STREAM_last_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_last_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_last_V_0_vld_out <= INPUT_STREAM_last_V_0_state(0);
    INPUT_STREAM_strb_V_0_ack_in <= INPUT_STREAM_strb_V_0_state(1);

    INPUT_STREAM_strb_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_strb_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_strb_V_0_data_out_assign_proc : process(INPUT_STREAM_strb_V_0_payload_A, INPUT_STREAM_strb_V_0_payload_B, INPUT_STREAM_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_strb_V_0_sel)) then 
            INPUT_STREAM_strb_V_0_data_out <= INPUT_STREAM_strb_V_0_payload_B;
        else 
            INPUT_STREAM_strb_V_0_data_out <= INPUT_STREAM_strb_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_strb_V_0_load_A <= (not(INPUT_STREAM_strb_V_0_sel_wr) and INPUT_STREAM_strb_V_0_state_cmp_full);
    INPUT_STREAM_strb_V_0_load_B <= (INPUT_STREAM_strb_V_0_state_cmp_full and INPUT_STREAM_strb_V_0_sel_wr);
    INPUT_STREAM_strb_V_0_sel <= INPUT_STREAM_strb_V_0_sel_rd;
    INPUT_STREAM_strb_V_0_state_cmp_full <= '0' when (INPUT_STREAM_strb_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_strb_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_strb_V_0_vld_out <= INPUT_STREAM_strb_V_0_state(0);
    INPUT_STREAM_user_V_0_ack_in <= INPUT_STREAM_user_V_0_state(1);

    INPUT_STREAM_user_V_0_ack_out_assign_proc : process(grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_user_V_0_ack_out <= grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_user_V_0_data_out_assign_proc : process(INPUT_STREAM_user_V_0_payload_A, INPUT_STREAM_user_V_0_payload_B, INPUT_STREAM_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_user_V_0_sel)) then 
            INPUT_STREAM_user_V_0_data_out <= INPUT_STREAM_user_V_0_payload_B;
        else 
            INPUT_STREAM_user_V_0_data_out <= INPUT_STREAM_user_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_user_V_0_load_A <= (not(INPUT_STREAM_user_V_0_sel_wr) and INPUT_STREAM_user_V_0_state_cmp_full);
    INPUT_STREAM_user_V_0_load_B <= (INPUT_STREAM_user_V_0_state_cmp_full and INPUT_STREAM_user_V_0_sel_wr);
    INPUT_STREAM_user_V_0_sel <= INPUT_STREAM_user_V_0_sel_rd;
    INPUT_STREAM_user_V_0_state_cmp_full <= '0' when (INPUT_STREAM_user_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_user_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_user_V_0_vld_out <= INPUT_STREAM_user_V_0_state(0);
    OUTPUT_STREAM_TDATA <= OUTPUT_STREAM_data_V_1_data_out;
    OUTPUT_STREAM_TDEST <= OUTPUT_STREAM_dest_V_1_data_out;
    OUTPUT_STREAM_TID <= OUTPUT_STREAM_id_V_1_data_out;
    OUTPUT_STREAM_TKEEP <= OUTPUT_STREAM_keep_V_1_data_out;
    OUTPUT_STREAM_TLAST <= OUTPUT_STREAM_last_V_1_data_out;
    OUTPUT_STREAM_TSTRB <= OUTPUT_STREAM_strb_V_1_data_out;
    OUTPUT_STREAM_TUSER <= OUTPUT_STREAM_user_V_1_data_out;
    OUTPUT_STREAM_TVALID <= OUTPUT_STREAM_dest_V_1_state(0);
    OUTPUT_STREAM_data_V_1_ack_in <= OUTPUT_STREAM_data_V_1_state(1);
    OUTPUT_STREAM_data_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_data_V_1_data_out_assign_proc : process(OUTPUT_STREAM_data_V_1_payload_A, OUTPUT_STREAM_data_V_1_payload_B, OUTPUT_STREAM_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_sel)) then 
            OUTPUT_STREAM_data_V_1_data_out <= OUTPUT_STREAM_data_V_1_payload_B;
        else 
            OUTPUT_STREAM_data_V_1_data_out <= OUTPUT_STREAM_data_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_data_V_1_load_A <= (not(OUTPUT_STREAM_data_V_1_sel_wr) and OUTPUT_STREAM_data_V_1_state_cmp_full);
    OUTPUT_STREAM_data_V_1_load_B <= (OUTPUT_STREAM_data_V_1_state_cmp_full and OUTPUT_STREAM_data_V_1_sel_wr);
    OUTPUT_STREAM_data_V_1_sel <= OUTPUT_STREAM_data_V_1_sel_rd;
    OUTPUT_STREAM_data_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_data_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_data_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_data_V_1_vld_out <= OUTPUT_STREAM_data_V_1_state(0);
    OUTPUT_STREAM_dest_V_1_ack_in <= OUTPUT_STREAM_dest_V_1_state(1);
    OUTPUT_STREAM_dest_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_dest_V_1_data_out_assign_proc : process(OUTPUT_STREAM_dest_V_1_payload_A, OUTPUT_STREAM_dest_V_1_payload_B, OUTPUT_STREAM_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_sel)) then 
            OUTPUT_STREAM_dest_V_1_data_out <= OUTPUT_STREAM_dest_V_1_payload_B;
        else 
            OUTPUT_STREAM_dest_V_1_data_out <= OUTPUT_STREAM_dest_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_dest_V_1_load_A <= (not(OUTPUT_STREAM_dest_V_1_sel_wr) and OUTPUT_STREAM_dest_V_1_state_cmp_full);
    OUTPUT_STREAM_dest_V_1_load_B <= (OUTPUT_STREAM_dest_V_1_state_cmp_full and OUTPUT_STREAM_dest_V_1_sel_wr);
    OUTPUT_STREAM_dest_V_1_sel <= OUTPUT_STREAM_dest_V_1_sel_rd;
    OUTPUT_STREAM_dest_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_dest_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_dest_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_dest_V_1_vld_out <= OUTPUT_STREAM_dest_V_1_state(0);
    OUTPUT_STREAM_id_V_1_ack_in <= OUTPUT_STREAM_id_V_1_state(1);
    OUTPUT_STREAM_id_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_id_V_1_data_out_assign_proc : process(OUTPUT_STREAM_id_V_1_payload_A, OUTPUT_STREAM_id_V_1_payload_B, OUTPUT_STREAM_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_id_V_1_sel)) then 
            OUTPUT_STREAM_id_V_1_data_out <= OUTPUT_STREAM_id_V_1_payload_B;
        else 
            OUTPUT_STREAM_id_V_1_data_out <= OUTPUT_STREAM_id_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_id_V_1_load_A <= (not(OUTPUT_STREAM_id_V_1_sel_wr) and OUTPUT_STREAM_id_V_1_state_cmp_full);
    OUTPUT_STREAM_id_V_1_load_B <= (OUTPUT_STREAM_id_V_1_state_cmp_full and OUTPUT_STREAM_id_V_1_sel_wr);
    OUTPUT_STREAM_id_V_1_sel <= OUTPUT_STREAM_id_V_1_sel_rd;
    OUTPUT_STREAM_id_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_id_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_id_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_id_V_1_vld_out <= OUTPUT_STREAM_id_V_1_state(0);
    OUTPUT_STREAM_keep_V_1_ack_in <= OUTPUT_STREAM_keep_V_1_state(1);
    OUTPUT_STREAM_keep_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_keep_V_1_data_out_assign_proc : process(OUTPUT_STREAM_keep_V_1_payload_A, OUTPUT_STREAM_keep_V_1_payload_B, OUTPUT_STREAM_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_sel)) then 
            OUTPUT_STREAM_keep_V_1_data_out <= OUTPUT_STREAM_keep_V_1_payload_B;
        else 
            OUTPUT_STREAM_keep_V_1_data_out <= OUTPUT_STREAM_keep_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_keep_V_1_load_A <= (not(OUTPUT_STREAM_keep_V_1_sel_wr) and OUTPUT_STREAM_keep_V_1_state_cmp_full);
    OUTPUT_STREAM_keep_V_1_load_B <= (OUTPUT_STREAM_keep_V_1_state_cmp_full and OUTPUT_STREAM_keep_V_1_sel_wr);
    OUTPUT_STREAM_keep_V_1_sel <= OUTPUT_STREAM_keep_V_1_sel_rd;
    OUTPUT_STREAM_keep_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_keep_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_keep_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_keep_V_1_vld_out <= OUTPUT_STREAM_keep_V_1_state(0);
    OUTPUT_STREAM_last_V_1_ack_in <= OUTPUT_STREAM_last_V_1_state(1);
    OUTPUT_STREAM_last_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_last_V_1_data_out_assign_proc : process(OUTPUT_STREAM_last_V_1_payload_A, OUTPUT_STREAM_last_V_1_payload_B, OUTPUT_STREAM_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_sel)) then 
            OUTPUT_STREAM_last_V_1_data_out <= OUTPUT_STREAM_last_V_1_payload_B;
        else 
            OUTPUT_STREAM_last_V_1_data_out <= OUTPUT_STREAM_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_last_V_1_load_A <= (not(OUTPUT_STREAM_last_V_1_sel_wr) and OUTPUT_STREAM_last_V_1_state_cmp_full);
    OUTPUT_STREAM_last_V_1_load_B <= (OUTPUT_STREAM_last_V_1_state_cmp_full and OUTPUT_STREAM_last_V_1_sel_wr);
    OUTPUT_STREAM_last_V_1_sel <= OUTPUT_STREAM_last_V_1_sel_rd;
    OUTPUT_STREAM_last_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_last_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_last_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_last_V_1_vld_out <= OUTPUT_STREAM_last_V_1_state(0);
    OUTPUT_STREAM_strb_V_1_ack_in <= OUTPUT_STREAM_strb_V_1_state(1);
    OUTPUT_STREAM_strb_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_strb_V_1_data_out_assign_proc : process(OUTPUT_STREAM_strb_V_1_payload_A, OUTPUT_STREAM_strb_V_1_payload_B, OUTPUT_STREAM_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_sel)) then 
            OUTPUT_STREAM_strb_V_1_data_out <= OUTPUT_STREAM_strb_V_1_payload_B;
        else 
            OUTPUT_STREAM_strb_V_1_data_out <= OUTPUT_STREAM_strb_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_strb_V_1_load_A <= (not(OUTPUT_STREAM_strb_V_1_sel_wr) and OUTPUT_STREAM_strb_V_1_state_cmp_full);
    OUTPUT_STREAM_strb_V_1_load_B <= (OUTPUT_STREAM_strb_V_1_state_cmp_full and OUTPUT_STREAM_strb_V_1_sel_wr);
    OUTPUT_STREAM_strb_V_1_sel <= OUTPUT_STREAM_strb_V_1_sel_rd;
    OUTPUT_STREAM_strb_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_strb_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_strb_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_strb_V_1_vld_out <= OUTPUT_STREAM_strb_V_1_state(0);
    OUTPUT_STREAM_user_V_1_ack_in <= OUTPUT_STREAM_user_V_1_state(1);
    OUTPUT_STREAM_user_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_user_V_1_data_out_assign_proc : process(OUTPUT_STREAM_user_V_1_payload_A, OUTPUT_STREAM_user_V_1_payload_B, OUTPUT_STREAM_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_user_V_1_sel)) then 
            OUTPUT_STREAM_user_V_1_data_out <= OUTPUT_STREAM_user_V_1_payload_B;
        else 
            OUTPUT_STREAM_user_V_1_data_out <= OUTPUT_STREAM_user_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_user_V_1_load_A <= (not(OUTPUT_STREAM_user_V_1_sel_wr) and OUTPUT_STREAM_user_V_1_state_cmp_full);
    OUTPUT_STREAM_user_V_1_load_B <= (OUTPUT_STREAM_user_V_1_state_cmp_full and OUTPUT_STREAM_user_V_1_sel_wr);
    OUTPUT_STREAM_user_V_1_sel <= OUTPUT_STREAM_user_V_1_sel_rd;
    OUTPUT_STREAM_user_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_user_V_1_state = ap_const_lv2_1) else '1';
    OUTPUT_STREAM_user_V_1_vld_in <= grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TVALID;
    OUTPUT_STREAM_user_V_1_vld_out <= OUTPUT_STREAM_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_assign_proc : process(OUTPUT_STREAM_TREADY, OUTPUT_STREAM_data_V_1_state, OUTPUT_STREAM_keep_V_1_state, OUTPUT_STREAM_strb_V_1_state, OUTPUT_STREAM_user_V_1_state, OUTPUT_STREAM_last_V_1_state, OUTPUT_STREAM_id_V_1_state, OUTPUT_STREAM_dest_V_1_state)
    begin
                ap_block_state4 <= ((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)));
    end process;


    ap_done_assign_proc : process(OUTPUT_STREAM_TREADY, OUTPUT_STREAM_data_V_1_state, OUTPUT_STREAM_keep_V_1_state, OUTPUT_STREAM_strb_V_1_state, OUTPUT_STREAM_user_V_1_state, OUTPUT_STREAM_last_V_1_state, OUTPUT_STREAM_id_V_1_state, OUTPUT_STREAM_dest_V_1_state, ap_CS_fsm_state4)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(OUTPUT_STREAM_TREADY, OUTPUT_STREAM_data_V_1_state, OUTPUT_STREAM_keep_V_1_state, OUTPUT_STREAM_strb_V_1_state, OUTPUT_STREAM_user_V_1_state, OUTPUT_STREAM_last_V_1_state, OUTPUT_STREAM_id_V_1_state, OUTPUT_STREAM_dest_V_1_state, ap_CS_fsm_state4)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_wrapped_mmult_hw_fu_48_INPUT_STREAM_TVALID <= INPUT_STREAM_dest_V_0_state(0);
    grp_wrapped_mmult_hw_fu_48_OUTPUT_STREAM_TREADY <= ((ap_CS_fsm_state3 and OUTPUT_STREAM_dest_V_1_ack_in) or (ap_CS_fsm_state3 and OUTPUT_STREAM_id_V_1_ack_in) or (ap_CS_fsm_state3 and OUTPUT_STREAM_last_V_1_ack_in) or (ap_CS_fsm_state3 and OUTPUT_STREAM_user_V_1_ack_in) or (ap_CS_fsm_state3 and OUTPUT_STREAM_strb_V_1_ack_in) or (ap_CS_fsm_state3 and OUTPUT_STREAM_keep_V_1_ack_in) or (ap_CS_fsm_state3 and OUTPUT_STREAM_data_V_1_ack_in));
    grp_wrapped_mmult_hw_fu_48_ap_start <= grp_wrapped_mmult_hw_fu_48_ap_start_reg;
end behav;
