-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pgd_f32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x_out_ce0 : OUT STD_LOGIC;
    x_out_we0 : OUT STD_LOGIC;
    x_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pgd_f32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln18_fu_228_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Ax_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ax_ce0 : STD_LOGIC;
    signal Ax_we0 : STD_LOGIC;
    signal Ax_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grad_x_ce0 : STD_LOGIC;
    signal grad_x_we0 : STD_LOGIC;
    signal grad_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lambdagrad_x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lambdagrad_x_ce0 : STD_LOGIC;
    signal lambdagrad_x_we0 : STD_LOGIC;
    signal lambdagrad_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xlambdagrad_x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xlambdagrad_x_ce0 : STD_LOGIC;
    signal xlambdagrad_x_we0 : STD_LOGIC;
    signal xlambdagrad_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xlambdagrad_xlambdag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xlambdagrad_xlambdag_ce0 : STD_LOGIC;
    signal xlambdagrad_xlambdag_we0 : STD_LOGIC;
    signal xlambdagrad_xlambdag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xlambdagrad_xlambdag_ce1 : STD_LOGIC;
    signal xlambdagrad_xlambdag_we1 : STD_LOGIC;
    signal xlambdagrad_xlambdag_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xlambdagrad_xlambdag_1_ce0 : STD_LOGIC;
    signal xlambdagrad_xlambdag_1_we0 : STD_LOGIC;
    signal xlambdagrad_xlambdag_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xlambdagrad_xlambdag_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xlambdagrad_xlambdag_1_ce1 : STD_LOGIC;
    signal xlambdagrad_xlambdag_1_we1 : STD_LOGIC;
    signal xlambdagrad_xlambdag_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_ce0 : STD_LOGIC;
    signal x_we0 : STD_LOGIC;
    signal x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_ce1 : STD_LOGIC;
    signal x_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_fu_147_ap_start : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_ap_done : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_ap_idle : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_ap_ready : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_B_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_fu_147_B_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_B_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_fu_147_B_ce1 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_C_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_fu_147_C_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_C_we0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_147_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SUB_float_16_s_fu_185_ap_start : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_ap_done : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_ap_idle : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_ap_ready : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SUB_float_16_s_fu_185_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_V1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SUB_float_16_s_fu_185_V2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SUB_float_16_s_fu_185_V2_ce0 : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_V2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SUB_float_16_s_fu_185_V3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SUB_float_16_s_fu_185_V3_ce0 : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_V3_we0 : STD_LOGIC;
    signal grp_VEC_SUB_float_16_s_fu_185_V3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_ADD_fu_192_ap_start : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_ap_done : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_ap_idle : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_ap_ready : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_ADD_fu_192_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_V3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_ADD_fu_192_V3_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_V3_we0 : STD_LOGIC;
    signal grp_VEC_SCALAR_ADD_fu_192_V3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_MUL_fu_198_ap_start : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_ap_done : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_ap_idle : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_ap_ready : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MUL_fu_198_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_V3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MUL_fu_198_V3_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_V3_we0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MUL_fu_198_V3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_MAX_fu_204_ap_start : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_ap_done : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_ap_idle : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_ap_ready : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MAX_fu_204_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_V1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_MAX_fu_204_V1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MAX_fu_204_V1_ce1 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_V1_we1 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_204_V1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_SUB_fu_209_ap_start : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_ap_done : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_ap_idle : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_ap_ready : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_SUB_fu_209_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_V3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_SUB_fu_209_V3_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_V3_we0 : STD_LOGIC;
    signal grp_VEC_SCALAR_SUB_fu_209_V3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC2VEC_float_16_s_fu_215_ap_start : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_ap_done : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_ap_idle : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_ap_ready : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC2VEC_float_16_s_fu_215_V1_ce0 : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_V1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC2VEC_float_16_s_fu_215_V2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC2VEC_float_16_s_fu_215_V2_ce0 : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_V2_we0 : STD_LOGIC;
    signal grp_VEC2VEC_float_16_s_fu_215_V2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_MINUS_float_16_s_fu_223_ap_start : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_ap_done : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_ap_idle : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_ap_ready : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_MINUS_float_16_s_fu_223_V1_ce0 : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_V1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_MINUS_float_16_s_fu_223_V1_ce1 : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_V1_we1 : STD_LOGIC;
    signal grp_VEC_MINUS_float_16_s_fu_223_V1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln18_reg_125 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln18_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_136 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_MAT_VEC_MUL_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln25_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_VEC_SUB_float_16_s_fu_185_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_VEC_SCALAR_ADD_fu_192_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_VEC_SCALAR_MUL_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_VEC_SCALAR_MAX_fu_204_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_VEC_SCALAR_SUB_fu_209_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_VEC2VEC_float_16_s_fu_215_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_VEC_MINUS_float_16_s_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln18_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_state15_on_subcall_done : BOOLEAN;

    component MAT_VEC_MUL IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SUB_float_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V2_ce0 : OUT STD_LOGIC;
        V2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V3_ce0 : OUT STD_LOGIC;
        V3_we0 : OUT STD_LOGIC;
        V3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SCALAR_ADD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V3_ce0 : OUT STD_LOGIC;
        V3_we0 : OUT STD_LOGIC;
        V3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SCALAR_MUL IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V3_ce0 : OUT STD_LOGIC;
        V3_we0 : OUT STD_LOGIC;
        V3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SCALAR_MAX IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce1 : OUT STD_LOGIC;
        V1_we1 : OUT STD_LOGIC;
        V1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SCALAR_SUB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V3_ce0 : OUT STD_LOGIC;
        V3_we0 : OUT STD_LOGIC;
        V3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC2VEC_float_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V2_ce0 : OUT STD_LOGIC;
        V2_we0 : OUT STD_LOGIC;
        V2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_MINUS_float_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce1 : OUT STD_LOGIC;
        V1_we1 : OUT STD_LOGIC;
        V1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pgd_f32_Ax IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pgd_f32_xlambdagribs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pgd_f32_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Ax_U : component pgd_f32_Ax
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Ax_address0,
        ce0 => Ax_ce0,
        we0 => Ax_we0,
        d0 => grp_MAT_VEC_MUL_fu_147_C_d0,
        q0 => Ax_q0);

    b_U : component pgd_f32_Ax
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => grp_VEC2VEC_float_16_s_fu_215_V2_d0,
        q0 => b_q0);

    grad_x_U : component pgd_f32_Ax
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_x_address0,
        ce0 => grad_x_ce0,
        we0 => grad_x_we0,
        d0 => grp_VEC_SUB_float_16_s_fu_185_V3_d0,
        q0 => grad_x_q0);

    lambdagrad_x_U : component pgd_f32_Ax
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lambdagrad_x_address0,
        ce0 => lambdagrad_x_ce0,
        we0 => lambdagrad_x_we0,
        d0 => grp_VEC_SCALAR_MUL_fu_198_V3_d0,
        q0 => lambdagrad_x_q0);

    xlambdagrad_x_U : component pgd_f32_Ax
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xlambdagrad_x_address0,
        ce0 => xlambdagrad_x_ce0,
        we0 => xlambdagrad_x_we0,
        d0 => grp_VEC_SUB_float_16_s_fu_185_V3_d0,
        q0 => xlambdagrad_x_q0);

    xlambdagrad_xlambdag_U : component pgd_f32_xlambdagribs
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xlambdagrad_xlambdag_address0,
        ce0 => xlambdagrad_xlambdag_ce0,
        we0 => xlambdagrad_xlambdag_we0,
        d0 => grp_VEC_SCALAR_SUB_fu_209_V3_d0,
        q0 => xlambdagrad_xlambdag_q0,
        address1 => grp_VEC_SCALAR_MAX_fu_204_V1_address1,
        ce1 => xlambdagrad_xlambdag_ce1,
        we1 => xlambdagrad_xlambdag_we1,
        d1 => grp_VEC_SCALAR_MAX_fu_204_V1_d1);

    xlambdagrad_xlambdag_1_U : component pgd_f32_xlambdagribs
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xlambdagrad_xlambdag_1_address0,
        ce0 => xlambdagrad_xlambdag_1_ce0,
        we0 => xlambdagrad_xlambdag_1_we0,
        d0 => grp_VEC_SCALAR_ADD_fu_192_V3_d0,
        q0 => xlambdagrad_xlambdag_1_q0,
        address1 => xlambdagrad_xlambdag_1_address1,
        ce1 => xlambdagrad_xlambdag_1_ce1,
        we1 => xlambdagrad_xlambdag_1_we1,
        d1 => xlambdagrad_xlambdag_1_d1);

    x_U : component pgd_f32_x
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_address0,
        ce0 => x_ce0,
        we0 => x_we0,
        d0 => x_d0,
        q0 => x_q0,
        address1 => grp_MAT_VEC_MUL_fu_147_B_address1,
        ce1 => x_ce1,
        q1 => x_q1);

    grp_MAT_VEC_MUL_fu_147 : component MAT_VEC_MUL
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_VEC_MUL_fu_147_ap_start,
        ap_done => grp_MAT_VEC_MUL_fu_147_ap_done,
        ap_idle => grp_MAT_VEC_MUL_fu_147_ap_idle,
        ap_ready => grp_MAT_VEC_MUL_fu_147_ap_ready,
        B_address0 => grp_MAT_VEC_MUL_fu_147_B_address0,
        B_ce0 => grp_MAT_VEC_MUL_fu_147_B_ce0,
        B_q0 => x_q0,
        B_address1 => grp_MAT_VEC_MUL_fu_147_B_address1,
        B_ce1 => grp_MAT_VEC_MUL_fu_147_B_ce1,
        B_q1 => x_q1,
        C_address0 => grp_MAT_VEC_MUL_fu_147_C_address0,
        C_ce0 => grp_MAT_VEC_MUL_fu_147_C_ce0,
        C_we0 => grp_MAT_VEC_MUL_fu_147_C_we0,
        C_d0 => grp_MAT_VEC_MUL_fu_147_C_d0);

    grp_VEC_SUB_float_16_s_fu_185 : component VEC_SUB_float_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SUB_float_16_s_fu_185_ap_start,
        ap_done => grp_VEC_SUB_float_16_s_fu_185_ap_done,
        ap_idle => grp_VEC_SUB_float_16_s_fu_185_ap_idle,
        ap_ready => grp_VEC_SUB_float_16_s_fu_185_ap_ready,
        V1_address0 => grp_VEC_SUB_float_16_s_fu_185_V1_address0,
        V1_ce0 => grp_VEC_SUB_float_16_s_fu_185_V1_ce0,
        V1_q0 => grp_VEC_SUB_float_16_s_fu_185_V1_q0,
        V2_address0 => grp_VEC_SUB_float_16_s_fu_185_V2_address0,
        V2_ce0 => grp_VEC_SUB_float_16_s_fu_185_V2_ce0,
        V2_q0 => grp_VEC_SUB_float_16_s_fu_185_V2_q0,
        V3_address0 => grp_VEC_SUB_float_16_s_fu_185_V3_address0,
        V3_ce0 => grp_VEC_SUB_float_16_s_fu_185_V3_ce0,
        V3_we0 => grp_VEC_SUB_float_16_s_fu_185_V3_we0,
        V3_d0 => grp_VEC_SUB_float_16_s_fu_185_V3_d0);

    grp_VEC_SCALAR_ADD_fu_192 : component VEC_SCALAR_ADD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SCALAR_ADD_fu_192_ap_start,
        ap_done => grp_VEC_SCALAR_ADD_fu_192_ap_done,
        ap_idle => grp_VEC_SCALAR_ADD_fu_192_ap_idle,
        ap_ready => grp_VEC_SCALAR_ADD_fu_192_ap_ready,
        V1_address0 => grp_VEC_SCALAR_ADD_fu_192_V1_address0,
        V1_ce0 => grp_VEC_SCALAR_ADD_fu_192_V1_ce0,
        V1_q0 => xlambdagrad_x_q0,
        V3_address0 => grp_VEC_SCALAR_ADD_fu_192_V3_address0,
        V3_ce0 => grp_VEC_SCALAR_ADD_fu_192_V3_ce0,
        V3_we0 => grp_VEC_SCALAR_ADD_fu_192_V3_we0,
        V3_d0 => grp_VEC_SCALAR_ADD_fu_192_V3_d0);

    grp_VEC_SCALAR_MUL_fu_198 : component VEC_SCALAR_MUL
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SCALAR_MUL_fu_198_ap_start,
        ap_done => grp_VEC_SCALAR_MUL_fu_198_ap_done,
        ap_idle => grp_VEC_SCALAR_MUL_fu_198_ap_idle,
        ap_ready => grp_VEC_SCALAR_MUL_fu_198_ap_ready,
        V1_address0 => grp_VEC_SCALAR_MUL_fu_198_V1_address0,
        V1_ce0 => grp_VEC_SCALAR_MUL_fu_198_V1_ce0,
        V1_q0 => grad_x_q0,
        V3_address0 => grp_VEC_SCALAR_MUL_fu_198_V3_address0,
        V3_ce0 => grp_VEC_SCALAR_MUL_fu_198_V3_ce0,
        V3_we0 => grp_VEC_SCALAR_MUL_fu_198_V3_we0,
        V3_d0 => grp_VEC_SCALAR_MUL_fu_198_V3_d0);

    grp_VEC_SCALAR_MAX_fu_204 : component VEC_SCALAR_MAX
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SCALAR_MAX_fu_204_ap_start,
        ap_done => grp_VEC_SCALAR_MAX_fu_204_ap_done,
        ap_idle => grp_VEC_SCALAR_MAX_fu_204_ap_idle,
        ap_ready => grp_VEC_SCALAR_MAX_fu_204_ap_ready,
        V1_address0 => grp_VEC_SCALAR_MAX_fu_204_V1_address0,
        V1_ce0 => grp_VEC_SCALAR_MAX_fu_204_V1_ce0,
        V1_q0 => grp_VEC_SCALAR_MAX_fu_204_V1_q0,
        V1_address1 => grp_VEC_SCALAR_MAX_fu_204_V1_address1,
        V1_ce1 => grp_VEC_SCALAR_MAX_fu_204_V1_ce1,
        V1_we1 => grp_VEC_SCALAR_MAX_fu_204_V1_we1,
        V1_d1 => grp_VEC_SCALAR_MAX_fu_204_V1_d1);

    grp_VEC_SCALAR_SUB_fu_209 : component VEC_SCALAR_SUB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SCALAR_SUB_fu_209_ap_start,
        ap_done => grp_VEC_SCALAR_SUB_fu_209_ap_done,
        ap_idle => grp_VEC_SCALAR_SUB_fu_209_ap_idle,
        ap_ready => grp_VEC_SCALAR_SUB_fu_209_ap_ready,
        V1_address0 => grp_VEC_SCALAR_SUB_fu_209_V1_address0,
        V1_ce0 => grp_VEC_SCALAR_SUB_fu_209_V1_ce0,
        V1_q0 => xlambdagrad_x_q0,
        V3_address0 => grp_VEC_SCALAR_SUB_fu_209_V3_address0,
        V3_ce0 => grp_VEC_SCALAR_SUB_fu_209_V3_ce0,
        V3_we0 => grp_VEC_SCALAR_SUB_fu_209_V3_we0,
        V3_d0 => grp_VEC_SCALAR_SUB_fu_209_V3_d0);

    grp_VEC2VEC_float_16_s_fu_215 : component VEC2VEC_float_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC2VEC_float_16_s_fu_215_ap_start,
        ap_done => grp_VEC2VEC_float_16_s_fu_215_ap_done,
        ap_idle => grp_VEC2VEC_float_16_s_fu_215_ap_idle,
        ap_ready => grp_VEC2VEC_float_16_s_fu_215_ap_ready,
        V1_address0 => grp_VEC2VEC_float_16_s_fu_215_V1_address0,
        V1_ce0 => grp_VEC2VEC_float_16_s_fu_215_V1_ce0,
        V1_q0 => grp_VEC2VEC_float_16_s_fu_215_V1_q0,
        V2_address0 => grp_VEC2VEC_float_16_s_fu_215_V2_address0,
        V2_ce0 => grp_VEC2VEC_float_16_s_fu_215_V2_ce0,
        V2_we0 => grp_VEC2VEC_float_16_s_fu_215_V2_we0,
        V2_d0 => grp_VEC2VEC_float_16_s_fu_215_V2_d0);

    grp_VEC_MINUS_float_16_s_fu_223 : component VEC_MINUS_float_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_MINUS_float_16_s_fu_223_ap_start,
        ap_done => grp_VEC_MINUS_float_16_s_fu_223_ap_done,
        ap_idle => grp_VEC_MINUS_float_16_s_fu_223_ap_idle,
        ap_ready => grp_VEC_MINUS_float_16_s_fu_223_ap_ready,
        V1_address0 => grp_VEC_MINUS_float_16_s_fu_223_V1_address0,
        V1_ce0 => grp_VEC_MINUS_float_16_s_fu_223_V1_ce0,
        V1_q0 => xlambdagrad_xlambdag_1_q0,
        V1_address1 => grp_VEC_MINUS_float_16_s_fu_223_V1_address1,
        V1_ce1 => grp_VEC_MINUS_float_16_s_fu_223_V1_ce1,
        V1_we1 => grp_VEC_MINUS_float_16_s_fu_223_V1_we1,
        V1_d1 => grp_VEC_MINUS_float_16_s_fu_223_V1_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_MAT_VEC_MUL_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_VEC_MUL_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln25_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_MAT_VEC_MUL_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MAT_VEC_MUL_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_MAT_VEC_MUL_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC2VEC_float_16_s_fu_215_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC2VEC_float_16_s_fu_215_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln25_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln18_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_VEC2VEC_float_16_s_fu_215_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC2VEC_float_16_s_fu_215_ap_ready = ap_const_logic_1)) then 
                    grp_VEC2VEC_float_16_s_fu_215_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_MINUS_float_16_s_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_MINUS_float_16_s_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_VEC_MINUS_float_16_s_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_MINUS_float_16_s_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_MINUS_float_16_s_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SCALAR_ADD_fu_192_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SCALAR_ADD_fu_192_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_VEC_SCALAR_ADD_fu_192_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SCALAR_ADD_fu_192_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SCALAR_ADD_fu_192_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SCALAR_MAX_fu_204_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SCALAR_MAX_fu_204_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_VEC_SCALAR_MAX_fu_204_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SCALAR_MAX_fu_204_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SCALAR_MAX_fu_204_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SCALAR_MUL_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SCALAR_MUL_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_VEC_SCALAR_MUL_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SCALAR_MUL_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SCALAR_MUL_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SCALAR_SUB_fu_209_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SCALAR_SUB_fu_209_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_VEC_SCALAR_SUB_fu_209_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SCALAR_SUB_fu_209_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SCALAR_SUB_fu_209_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SUB_float_16_s_fu_185_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SUB_float_16_s_fu_185_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_VEC_SUB_float_16_s_fu_185_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SUB_float_16_s_fu_185_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SUB_float_16_s_fu_185_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_VEC_SUB_float_16_s_fu_185_ap_done = ap_const_logic_1))) then 
                i_0_reg_136 <= i_reg_268;
            elsif (((grp_VEC2VEC_float_16_s_fu_215_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_136 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln18_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln18_reg_125 <= add_ln18_fu_228_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln18_reg_125 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_268 <= i_fu_251_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_MAT_VEC_MUL_fu_147_ap_done, grp_VEC_SUB_float_16_s_fu_185_ap_done, grp_VEC_SCALAR_MUL_fu_198_ap_done, grp_VEC_SCALAR_MAX_fu_204_ap_done, grp_VEC_SCALAR_SUB_fu_209_ap_done, grp_VEC2VEC_float_16_s_fu_215_ap_done, grp_VEC_MINUS_float_16_s_fu_223_ap_done, icmp_ln18_fu_239_p2, ap_CS_fsm_state3, ap_CS_fsm_state21, icmp_ln25_fu_245_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state17, ap_block_state15_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_VEC2VEC_float_16_s_fu_215_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln25_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_MAT_VEC_MUL_fu_147_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_VEC_SUB_float_16_s_fu_185_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_VEC_SCALAR_MUL_fu_198_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_VEC_SUB_float_16_s_fu_185_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_VEC_SCALAR_SUB_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_VEC_MINUS_float_16_s_fu_223_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_VEC_SCALAR_MAX_fu_204_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_VEC_SUB_float_16_s_fu_185_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((grp_VEC2VEC_float_16_s_fu_215_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Ax_address0_assign_proc : process(grp_MAT_VEC_MUL_fu_147_C_address0, grp_VEC_SUB_float_16_s_fu_185_V1_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Ax_address0 <= grp_VEC_SUB_float_16_s_fu_185_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ax_address0 <= grp_MAT_VEC_MUL_fu_147_C_address0;
        else 
            Ax_address0 <= "XXXX";
        end if; 
    end process;


    Ax_ce0_assign_proc : process(grp_MAT_VEC_MUL_fu_147_C_ce0, grp_VEC_SUB_float_16_s_fu_185_V1_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Ax_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ax_ce0 <= grp_MAT_VEC_MUL_fu_147_C_ce0;
        else 
            Ax_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ax_we0_assign_proc : process(grp_MAT_VEC_MUL_fu_147_C_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Ax_we0 <= grp_MAT_VEC_MUL_fu_147_C_we0;
        else 
            Ax_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln18_fu_228_p2 <= std_logic_vector(unsigned(phi_ln18_reg_125) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state15_on_subcall_done_assign_proc : process(grp_VEC_SCALAR_ADD_fu_192_ap_done, grp_VEC_SCALAR_MAX_fu_204_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((grp_VEC_SCALAR_MAX_fu_204_ap_done = ap_const_logic_0) or (grp_VEC_SCALAR_ADD_fu_192_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_VEC2VEC_float_16_s_fu_215_ap_done, ap_CS_fsm_state22)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_VEC2VEC_float_16_s_fu_215_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_VEC2VEC_float_16_s_fu_215_ap_done, ap_CS_fsm_state22)
    begin
        if (((grp_VEC2VEC_float_16_s_fu_215_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V2_address0, grp_VEC2VEC_float_16_s_fu_215_V2_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_address0 <= grp_VEC2VEC_float_16_s_fu_215_V2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_address0 <= grp_VEC_SUB_float_16_s_fu_185_V2_address0;
        else 
            b_address0 <= "XXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V2_ce0, grp_VEC2VEC_float_16_s_fu_215_V2_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= grp_VEC2VEC_float_16_s_fu_215_V2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V2_ce0;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(grp_VEC2VEC_float_16_s_fu_215_V2_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_we0 <= grp_VEC2VEC_float_16_s_fu_215_V2_we0;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_x_address0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V3_address0, grp_VEC_SCALAR_MUL_fu_198_V1_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grad_x_address0 <= grp_VEC_SCALAR_MUL_fu_198_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_x_address0 <= grp_VEC_SUB_float_16_s_fu_185_V3_address0;
        else 
            grad_x_address0 <= "XXXX";
        end if; 
    end process;


    grad_x_ce0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V3_ce0, grp_VEC_SCALAR_MUL_fu_198_V1_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grad_x_ce0 <= grp_VEC_SCALAR_MUL_fu_198_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_x_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V3_ce0;
        else 
            grad_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_x_we0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V3_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_x_we0 <= grp_VEC_SUB_float_16_s_fu_185_V3_we0;
        else 
            grad_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_MAT_VEC_MUL_fu_147_ap_start <= grp_MAT_VEC_MUL_fu_147_ap_start_reg;

    grp_VEC2VEC_float_16_s_fu_215_V1_q0_assign_proc : process(y_q0, x_q0, ap_CS_fsm_state3, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_VEC2VEC_float_16_s_fu_215_V1_q0 <= x_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_VEC2VEC_float_16_s_fu_215_V1_q0 <= y_q0;
        else 
            grp_VEC2VEC_float_16_s_fu_215_V1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_VEC2VEC_float_16_s_fu_215_ap_start <= grp_VEC2VEC_float_16_s_fu_215_ap_start_reg;
    grp_VEC_MINUS_float_16_s_fu_223_ap_start <= grp_VEC_MINUS_float_16_s_fu_223_ap_start_reg;
    grp_VEC_SCALAR_ADD_fu_192_ap_start <= grp_VEC_SCALAR_ADD_fu_192_ap_start_reg;

    grp_VEC_SCALAR_MAX_fu_204_V1_q0_assign_proc : process(xlambdagrad_xlambdag_q0, xlambdagrad_xlambdag_1_q0, ap_CS_fsm_state15, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_VEC_SCALAR_MAX_fu_204_V1_q0 <= xlambdagrad_xlambdag_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_VEC_SCALAR_MAX_fu_204_V1_q0 <= xlambdagrad_xlambdag_q0;
        else 
            grp_VEC_SCALAR_MAX_fu_204_V1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_VEC_SCALAR_MAX_fu_204_ap_start <= grp_VEC_SCALAR_MAX_fu_204_ap_start_reg;
    grp_VEC_SCALAR_MUL_fu_198_ap_start <= grp_VEC_SCALAR_MUL_fu_198_ap_start_reg;
    grp_VEC_SCALAR_SUB_fu_209_ap_start <= grp_VEC_SCALAR_SUB_fu_209_ap_start_reg;

    grp_VEC_SUB_float_16_s_fu_185_V1_q0_assign_proc : process(Ax_q0, xlambdagrad_xlambdag_q0, x_q0, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_VEC_SUB_float_16_s_fu_185_V1_q0 <= xlambdagrad_xlambdag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_VEC_SUB_float_16_s_fu_185_V1_q0 <= x_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_VEC_SUB_float_16_s_fu_185_V1_q0 <= Ax_q0;
        else 
            grp_VEC_SUB_float_16_s_fu_185_V1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_VEC_SUB_float_16_s_fu_185_V2_q0_assign_proc : process(b_q0, lambdagrad_x_q0, xlambdagrad_xlambdag_1_q0, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_VEC_SUB_float_16_s_fu_185_V2_q0 <= xlambdagrad_xlambdag_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_VEC_SUB_float_16_s_fu_185_V2_q0 <= lambdagrad_x_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_VEC_SUB_float_16_s_fu_185_V2_q0 <= b_q0;
        else 
            grp_VEC_SUB_float_16_s_fu_185_V2_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_VEC_SUB_float_16_s_fu_185_ap_start <= grp_VEC_SUB_float_16_s_fu_185_ap_start_reg;
    i_fu_251_p2 <= std_logic_vector(unsigned(i_0_reg_136) + unsigned(ap_const_lv3_1));
    icmp_ln18_fu_239_p2 <= "1" when (phi_ln18_reg_125 = ap_const_lv4_F) else "0";
    icmp_ln25_fu_245_p2 <= "1" when (i_0_reg_136 = ap_const_lv3_5) else "0";

    lambdagrad_x_address0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V2_address0, grp_VEC_SCALAR_MUL_fu_198_V3_address0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lambdagrad_x_address0 <= grp_VEC_SCALAR_MUL_fu_198_V3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            lambdagrad_x_address0 <= grp_VEC_SUB_float_16_s_fu_185_V2_address0;
        else 
            lambdagrad_x_address0 <= "XXXX";
        end if; 
    end process;


    lambdagrad_x_ce0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V2_ce0, grp_VEC_SCALAR_MUL_fu_198_V3_ce0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lambdagrad_x_ce0 <= grp_VEC_SCALAR_MUL_fu_198_V3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            lambdagrad_x_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V2_ce0;
        else 
            lambdagrad_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lambdagrad_x_we0_assign_proc : process(grp_VEC_SCALAR_MUL_fu_198_V3_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lambdagrad_x_we0 <= grp_VEC_SCALAR_MUL_fu_198_V3_we0;
        else 
            lambdagrad_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_address0_assign_proc : process(ap_CS_fsm_state2, grp_MAT_VEC_MUL_fu_147_B_address0, grp_VEC_SUB_float_16_s_fu_185_V1_address0, grp_VEC_SUB_float_16_s_fu_185_V3_address0, grp_VEC2VEC_float_16_s_fu_215_V1_address0, ap_CS_fsm_state21, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state22, zext_ln18_fu_234_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address0 <= zext_ln18_fu_234_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x_address0 <= grp_VEC2VEC_float_16_s_fu_215_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x_address0 <= grp_VEC_SUB_float_16_s_fu_185_V3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_address0 <= grp_VEC_SUB_float_16_s_fu_185_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_address0 <= grp_MAT_VEC_MUL_fu_147_B_address0;
        else 
            x_address0 <= "XXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state2, grp_MAT_VEC_MUL_fu_147_B_ce0, grp_VEC_SUB_float_16_s_fu_185_V1_ce0, grp_VEC_SUB_float_16_s_fu_185_V3_ce0, grp_VEC2VEC_float_16_s_fu_215_V1_ce0, ap_CS_fsm_state21, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x_ce0 <= grp_VEC2VEC_float_16_s_fu_215_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_ce0 <= grp_MAT_VEC_MUL_fu_147_B_ce0;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(grp_MAT_VEC_MUL_fu_147_B_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_ce1 <= grp_MAT_VEC_MUL_fu_147_B_ce1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_d0_assign_proc : process(ap_CS_fsm_state2, grp_VEC_SUB_float_16_s_fu_185_V3_d0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x_d0 <= grp_VEC_SUB_float_16_s_fu_185_V3_d0;
        else 
            x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x_out_address0 <= grp_VEC2VEC_float_16_s_fu_215_V2_address0;

    x_out_ce0_assign_proc : process(grp_VEC2VEC_float_16_s_fu_215_V2_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x_out_ce0 <= grp_VEC2VEC_float_16_s_fu_215_V2_ce0;
        else 
            x_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_out_d0 <= grp_VEC2VEC_float_16_s_fu_215_V2_d0;

    x_out_we0_assign_proc : process(grp_VEC2VEC_float_16_s_fu_215_V2_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x_out_we0 <= grp_VEC2VEC_float_16_s_fu_215_V2_we0;
        else 
            x_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(ap_CS_fsm_state2, grp_VEC_SUB_float_16_s_fu_185_V3_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x_we0 <= grp_VEC_SUB_float_16_s_fu_185_V3_we0;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_x_address0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V3_address0, grp_VEC_SCALAR_ADD_fu_192_V1_address0, grp_VEC_SCALAR_SUB_fu_209_V1_address0, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xlambdagrad_x_address0 <= grp_VEC_SCALAR_SUB_fu_209_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_x_address0 <= grp_VEC_SCALAR_ADD_fu_192_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xlambdagrad_x_address0 <= grp_VEC_SUB_float_16_s_fu_185_V3_address0;
        else 
            xlambdagrad_x_address0 <= "XXXX";
        end if; 
    end process;


    xlambdagrad_x_ce0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V3_ce0, grp_VEC_SCALAR_ADD_fu_192_V1_ce0, grp_VEC_SCALAR_SUB_fu_209_V1_ce0, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xlambdagrad_x_ce0 <= grp_VEC_SCALAR_SUB_fu_209_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_x_ce0 <= grp_VEC_SCALAR_ADD_fu_192_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xlambdagrad_x_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V3_ce0;
        else 
            xlambdagrad_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_x_we0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V3_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xlambdagrad_x_we0 <= grp_VEC_SUB_float_16_s_fu_185_V3_we0;
        else 
            xlambdagrad_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_1_address0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V2_address0, grp_VEC_SCALAR_ADD_fu_192_V3_address0, grp_VEC_SCALAR_MAX_fu_204_V1_address0, grp_VEC_MINUS_float_16_s_fu_223_V1_address0, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xlambdagrad_xlambdag_1_address0 <= grp_VEC_MINUS_float_16_s_fu_223_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xlambdagrad_xlambdag_1_address0 <= grp_VEC_SCALAR_MAX_fu_204_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_1_address0 <= grp_VEC_SCALAR_ADD_fu_192_V3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            xlambdagrad_xlambdag_1_address0 <= grp_VEC_SUB_float_16_s_fu_185_V2_address0;
        else 
            xlambdagrad_xlambdag_1_address0 <= "XXXX";
        end if; 
    end process;


    xlambdagrad_xlambdag_1_address1_assign_proc : process(grp_VEC_SCALAR_MAX_fu_204_V1_address1, grp_VEC_MINUS_float_16_s_fu_223_V1_address1, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xlambdagrad_xlambdag_1_address1 <= grp_VEC_MINUS_float_16_s_fu_223_V1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xlambdagrad_xlambdag_1_address1 <= grp_VEC_SCALAR_MAX_fu_204_V1_address1;
        else 
            xlambdagrad_xlambdag_1_address1 <= "XXXX";
        end if; 
    end process;


    xlambdagrad_xlambdag_1_ce0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V2_ce0, grp_VEC_SCALAR_ADD_fu_192_V3_ce0, grp_VEC_SCALAR_MAX_fu_204_V1_ce0, grp_VEC_MINUS_float_16_s_fu_223_V1_ce0, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xlambdagrad_xlambdag_1_ce0 <= grp_VEC_MINUS_float_16_s_fu_223_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xlambdagrad_xlambdag_1_ce0 <= grp_VEC_SCALAR_MAX_fu_204_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_1_ce0 <= grp_VEC_SCALAR_ADD_fu_192_V3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            xlambdagrad_xlambdag_1_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V2_ce0;
        else 
            xlambdagrad_xlambdag_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_1_ce1_assign_proc : process(grp_VEC_SCALAR_MAX_fu_204_V1_ce1, grp_VEC_MINUS_float_16_s_fu_223_V1_ce1, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xlambdagrad_xlambdag_1_ce1 <= grp_VEC_MINUS_float_16_s_fu_223_V1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xlambdagrad_xlambdag_1_ce1 <= grp_VEC_SCALAR_MAX_fu_204_V1_ce1;
        else 
            xlambdagrad_xlambdag_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_1_d1_assign_proc : process(grp_VEC_SCALAR_MAX_fu_204_V1_d1, grp_VEC_MINUS_float_16_s_fu_223_V1_d1, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xlambdagrad_xlambdag_1_d1 <= grp_VEC_MINUS_float_16_s_fu_223_V1_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xlambdagrad_xlambdag_1_d1 <= grp_VEC_SCALAR_MAX_fu_204_V1_d1;
        else 
            xlambdagrad_xlambdag_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xlambdagrad_xlambdag_1_we0_assign_proc : process(grp_VEC_SCALAR_ADD_fu_192_V3_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_1_we0 <= grp_VEC_SCALAR_ADD_fu_192_V3_we0;
        else 
            xlambdagrad_xlambdag_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_1_we1_assign_proc : process(grp_VEC_SCALAR_MAX_fu_204_V1_we1, grp_VEC_MINUS_float_16_s_fu_223_V1_we1, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xlambdagrad_xlambdag_1_we1 <= grp_VEC_MINUS_float_16_s_fu_223_V1_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xlambdagrad_xlambdag_1_we1 <= grp_VEC_SCALAR_MAX_fu_204_V1_we1;
        else 
            xlambdagrad_xlambdag_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_address0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V1_address0, grp_VEC_SCALAR_MAX_fu_204_V1_address0, grp_VEC_SCALAR_SUB_fu_209_V3_address0, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xlambdagrad_xlambdag_address0 <= grp_VEC_SCALAR_SUB_fu_209_V3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_address0 <= grp_VEC_SCALAR_MAX_fu_204_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            xlambdagrad_xlambdag_address0 <= grp_VEC_SUB_float_16_s_fu_185_V1_address0;
        else 
            xlambdagrad_xlambdag_address0 <= "XXXX";
        end if; 
    end process;


    xlambdagrad_xlambdag_ce0_assign_proc : process(grp_VEC_SUB_float_16_s_fu_185_V1_ce0, grp_VEC_SCALAR_MAX_fu_204_V1_ce0, grp_VEC_SCALAR_SUB_fu_209_V3_ce0, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xlambdagrad_xlambdag_ce0 <= grp_VEC_SCALAR_SUB_fu_209_V3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_ce0 <= grp_VEC_SCALAR_MAX_fu_204_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            xlambdagrad_xlambdag_ce0 <= grp_VEC_SUB_float_16_s_fu_185_V1_ce0;
        else 
            xlambdagrad_xlambdag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_ce1_assign_proc : process(grp_VEC_SCALAR_MAX_fu_204_V1_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_ce1 <= grp_VEC_SCALAR_MAX_fu_204_V1_ce1;
        else 
            xlambdagrad_xlambdag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_we0_assign_proc : process(grp_VEC_SCALAR_SUB_fu_209_V3_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xlambdagrad_xlambdag_we0 <= grp_VEC_SCALAR_SUB_fu_209_V3_we0;
        else 
            xlambdagrad_xlambdag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xlambdagrad_xlambdag_we1_assign_proc : process(grp_VEC_SCALAR_MAX_fu_204_V1_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xlambdagrad_xlambdag_we1 <= grp_VEC_SCALAR_MAX_fu_204_V1_we1;
        else 
            xlambdagrad_xlambdag_we1 <= ap_const_logic_0;
        end if; 
    end process;

    y_address0 <= grp_VEC2VEC_float_16_s_fu_215_V1_address0;

    y_ce0_assign_proc : process(grp_VEC2VEC_float_16_s_fu_215_V1_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_ce0 <= grp_VEC2VEC_float_16_s_fu_215_V1_ce0;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln18_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln18_reg_125),64));
end behav;
