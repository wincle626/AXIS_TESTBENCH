// Copyright @ Heriot-Watt University UDRC WP 2.1
// Author: Yun Wu

#include "pgd_fp32.hpp"

float pgd_f32(float A[ROW][ROW], float y[ROW],
		float beta, float gamma, float lambda,
		float x_out[ROW]){

#pragma HLS INLINE off
    float Ax[ROW];
    float b[ROW];
    float grad_x[ROW];
    float lambdagrad_x[ROW];
    float xlambdagrad_x[ROW];
    float xlambdagrad_xlambdagamma1[ROW];
    float xlambdagrad_xlambdagamma2[ROW];
	float x[ROW] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
//    int i=0;
//    for(i=0;i<ROW;i++){
//    	float tmp = y[i];
//    	b[i] = tmp;
//    }
    VEC2VEC<float, ROW>(y, b);
    for(int i=0;i<4;i++){
//#pragma HLS PIPELINE II=2
        float lambdagamma = lambda * gamma;
//        grad_x = AtA*x - Atb;
        MAT_VEC_MUL<float, ROW, ROW>(A, x, Ax);// AtA*x
        VEC_SUB<float, ROW>(Ax, b, grad_x); // AtA*x - Atb
//      z = prox_l1(x - lambda*grad_x, lambda*gamma);
        VEC_SCALAR_MUL<float, ROW>(grad_x, lambda,
                lambdagrad_x); // lambda*grad_x
        VEC_SUB<float, ROW>(x, lambdagrad_x,
                xlambdagrad_x); // x - lambda*grad_x
//		z = prox_l1(x, kappa)
//			z = max( 0, x - kappa ) - max( 0, -x - kappa );
        VEC_SCALAR_SUB<float, ROW>(xlambdagrad_x,
                lambdagamma, xlambdagrad_xlambdagamma1);// x - kappa
        VEC_SCALAR_ADD<float, ROW>(xlambdagrad_x,
                lambdagamma, xlambdagrad_xlambdagamma2); // x + kappa
        VEC_MINUS<float, ROW>(xlambdagrad_xlambdagamma2,
                xlambdagrad_xlambdagamma2); // -(x + kappa)
        VEC_SCALAR_MAX<float,ROW>(xlambdagrad_xlambdagamma1, (float)0,
                xlambdagrad_xlambdagamma1);// max( 0, x - kappa )
        VEC_SCALAR_MAX<float,ROW>(xlambdagrad_xlambdagamma2, (float)0,
                xlambdagrad_xlambdagamma2);// max( 0, -x - kappa )
        VEC_SUB<float,ROW>(xlambdagrad_xlambdagamma1,
                xlambdagrad_xlambdagamma2,
				x);// max( 0, x - kappa ) - max( 0, -x - kappa )
//        lambda = lambda * beta;
    }
//    for(int i=0;i<ROW;i++){
//    	float tmp = x[i];
//    	x_out[i] = tmp;
//    }
    VEC2VEC<float, ROW>(x, x_out);
        return lambda;

}

typedef ap_axiu<32,4,5,5> AXI_VAL;
//typedef ap_axiu<32,1,1,1> AXI_VAL;
void wrapped_pgd_hw(AXI_VAL in_stream[ROW], AXI_VAL out_stream[ROW])
{

	float A[ROW][ROW]={
		{6.46243004334221,-1.21426551501860,-0.127287980199009,-0.673937736863805,-0.357463159126502,1.14279806190071,0.183261668003756,-1.45467383047496,-1.01188508463840,0.0753850148978321,0.474830967652294,0.492358634928037,-0.287649403900107,0.876854812482999,-0.324911805927021,-0.396090332668214},
		{-1.21426551501860,1.98302289639964,-0.886195574216219,0.140231086724284,0.335415889953353,-0.337121799723403,-0.554845296002442,-1.00689216417880,-0.0522940921692834,0.589262223372810,0.139304691320589,-0.240329645416481,0.573598823506858,-0.0197893441350854,0.305247824841453,-0.195475586932846},
		{-0.127287980199009,-0.886195574216219,1.90029783341528,1.41894340090604,0.355153348873195,0.00198266019499546,1.15910939037378,0.925038909040232,0.506689156928013,0.231222077521565,-0.765015691079640,0.151961028875023,-0.610148252371051,-0.515522680549827,-0.207371696326681,-0.118563952773447},
		{-0.673937736863805,0.140231086724284,1.41894340090604,1.83818409637918,-0.0252035275403140,0.310734719387426,0.998630400502642,0.161252259635447,0.674191171315356,0.259388396480536,-0.523526632204280,-0.246633355045573,-0.371337505063907,-0.181596385145756,0.234128440975253,-0.333846833499053},
		{-0.357463159126502,0.335415889953353,0.355153348873195,-0.0252035275403140,1.68981594809474,-1.33685252315484,-0.555856386000563,0.230136555545112,-0.389600534817664,0.432783924518278,-0.961962314491179,0.330784586461225,-0.0255620422834376,-0.204177657290310,0.0926349570665848,-0.242073083058743},
		{1.14279806190071,-0.337121799723403,0.00198266019499546,0.310734719387426,-1.33685252315484,1.39288421915434,0.675148293377620,-0.407453264086210,0.365953796357628,-0.171218417314998,0.488426086634232,-0.262078219970879,0.270068458556395,0.240928965797337,-0.0304217184117155,0.140178827497911},
		{0.183261668003756,-0.554845296002442,1.15910939037378,0.998630400502642,-0.555856386000563,0.675148293377620,1.67709919721977,0.708824544745349,0.380986834422820,-0.101374535629223,-0.0638826398073338,0.0567536948206246,-0.580571133615410,-0.290744847668348,-0.476682476864264,-0.279675165835187},
		{-1.45467383047496,-1.00689216417880,0.925038909040232,0.161252259635447,0.230136555545112,-0.407453264086210,0.708824544745349,1.59979639700778,0.259866555974256,-0.480847848454412,-0.525156361460180,0.254471615203660,-0.440089403541101,-0.412913167284658,-0.286461360354367,-0.0192022394918372},
		{-1.01188508463840,-0.0522940921692834,0.506689156928013,0.674191171315356,-0.389600534817664,0.365953796357628,0.380986834422820,0.259866555974256,0.587298905995375,0.126903620315882,-0.104545330088480,-0.239474247196225,0.177016917132897,-0.292511912214339,0.0448830593766457,0.289434068705995},
		{0.0753850148978321,0.589262223372810,0.231222077521565,0.259388396480536,0.432783924518278,-0.171218417314998,-0.101374535629223,-0.480847848454412,0.126903620315882,1.31132649056714,0.0633127161018746,-0.198881327103834,0.198424490609343,-0.812341448236955,-0.532671304446738,0.847224075401599},
		{0.474830967652294,0.139304691320589,-0.765015691079640,-0.523526632204280,-0.961962314491179,0.488426086634232,-0.0638826398073338,-0.525156361460180,-0.104545330088480,0.0633127161018746,1.32342313140185,-0.000539649711376615,-0.308951435360912,-0.149405690378786,-0.396794670764787,0.274725917473661},
		{0.492358634928037,-0.240329645416481,0.151961028875023,-0.246633355045573,0.330784586461225,-0.262078219970879,0.0567536948206246,0.254471615203660,-0.239474247196225,-0.198881327103834,-0.000539649711376615,1.12545660672504,0.140172620175246,-0.232937576880894,0.00599700817179416,-0.856806961623025},
		{-0.287649403900107,0.573598823506858,-0.610148252371051,-0.371337505063907,-0.0255620422834376,0.270068458556395,-0.580571133615410,-0.440089403541101,0.177016917132897,0.198424490609343,-0.308951435360912,0.140172620175246,1.44920857658112,-0.00541065357624859,0.368971722366384,0.124407428679175},
		{0.876854812482999,-0.0197893441350854,-0.515522680549827,-0.181596385145756,-0.204177657290310,0.240928965797337,-0.290744847668348,-0.412913167284658,-0.292511912214339,-0.812341448236955,-0.149405690378786,-0.232937576880894,-0.00541065357624859,1.07350073360536,0.654891769096636,-0.597318137667490},
		{-0.324911805927021,0.305247824841453,-0.207371696326681,0.234128440975253,0.0926349570665848,-0.0304217184117155,-0.476682476864264,-0.286461360354367,0.0448830593766457,-0.532671304446738,-0.396794670764787,0.00599700817179416,0.368971722366384,0.654891769096636,0.863571764083709,-0.647965621853004},
		{-0.396090332668214,-0.195475586932846,-0.118563952773447,-0.333846833499053,-0.242073083058743,0.140178827497911,-0.279675165835187,-0.0192022394918372,0.289434068705995,0.847224075401599,0.274725917473661,-0.856806961623025,0.124407428679175,-0.597318137667490,-0.647965621853004,1.72268316002748}
	};
	float b[ROW];
	float x[ROW];
	// stream in the 2 input matrices
	for(int i=0; i<ROW; i++){
		#pragma HLS PIPELINE II=1
		b[i] = pop_stream<float,4,5,5>(in_stream[i]);
//		b[i] = pop_stream<float,1,1,1>(in_stream[i]);
//		x[i] = 0.0;
	}
	// do computation
	float beta = 1;
	float gamma = 0;
	float lambda = 0.225793927247702;//1.8/7.97187073160452;
    lambda = pgd_f32(A, b, beta, gamma, lambda, x);
	// stream out result matrix
	for (int i=0; i<ROW; i++)
	{
		#pragma HLS PIPELINE II=1
		out_stream[i] = push_stream<float,4,5,5>(x[i], i==ROW-1);
//		out_stream[i] = push_stream<float,1,1,1>(x[i], i==ROW-1);
	}
}
// this is the top level design that will be synthesised into RTL
void HLS_accel(AXI_VAL INPUT_STREAM[ROW], AXI_VAL OUTPUT_STREAM[ROW])
{
	// Map ports to Vivado HLS interfaces
//	#pragma HLS INTERFACE s_axilite port=return bundle=CONTROL_BUS
	#pragma HLS INTERFACE axis port=INPUT_STREAM
	#pragma HLS INTERFACE axis port=OUTPUT_STREAM

	wrapped_pgd_hw(INPUT_STREAM, OUTPUT_STREAM);
}
