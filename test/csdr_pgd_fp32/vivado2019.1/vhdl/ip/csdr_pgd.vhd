-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity csdr_pgd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_ce1 : OUT STD_LOGIC;
    y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    xd_ce0 : OUT STD_LOGIC;
    xd_we0 : OUT STD_LOGIC;
    xd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xd_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xd_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    xd_ce1 : OUT STD_LOGIC;
    xd_we1 : OUT STD_LOGIC;
    xd_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of csdr_pgd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DCTinvM_0_ce0 : STD_LOGIC;
    signal DCTinvM_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_1_ce0 : STD_LOGIC;
    signal DCTinvM_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_2_ce0 : STD_LOGIC;
    signal DCTinvM_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_3_ce0 : STD_LOGIC;
    signal DCTinvM_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_4_ce0 : STD_LOGIC;
    signal DCTinvM_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_5_ce0 : STD_LOGIC;
    signal DCTinvM_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_6_ce0 : STD_LOGIC;
    signal DCTinvM_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_7_ce0 : STD_LOGIC;
    signal DCTinvM_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_8_ce0 : STD_LOGIC;
    signal DCTinvM_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_9_ce0 : STD_LOGIC;
    signal DCTinvM_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_10_ce0 : STD_LOGIC;
    signal DCTinvM_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_11_ce0 : STD_LOGIC;
    signal DCTinvM_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_12_ce0 : STD_LOGIC;
    signal DCTinvM_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_13_ce0 : STD_LOGIC;
    signal DCTinvM_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_14_ce0 : STD_LOGIC;
    signal DCTinvM_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DCTinvM_15_ce0 : STD_LOGIC;
    signal DCTinvM_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xi_dct_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_531 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln126_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln126_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln125_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_449_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_555 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal xi_dct_addr_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln252_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_3_fu_516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_573 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln259_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln258_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xq_dct_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xq_dct_load_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal xi_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xi_ce0 : STD_LOGIC;
    signal xi_we0 : STD_LOGIC;
    signal xi_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xi_ce1 : STD_LOGIC;
    signal xi_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xq_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xq_ce0 : STD_LOGIC;
    signal xq_we0 : STD_LOGIC;
    signal xq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xq_ce1 : STD_LOGIC;
    signal xq_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xi_dct_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xi_dct_ce0 : STD_LOGIC;
    signal xi_dct_we0 : STD_LOGIC;
    signal xi_dct_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xq_dct_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xq_dct_ce0 : STD_LOGIC;
    signal xq_dct_we0 : STD_LOGIC;
    signal Atyi_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Atyi_ce0 : STD_LOGIC;
    signal Atyi_we0 : STD_LOGIC;
    signal Atyi_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Atyq_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Atyq_ce0 : STD_LOGIC;
    signal Atyq_we0 : STD_LOGIC;
    signal Atyq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal yi_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal yi_ce0 : STD_LOGIC;
    signal yi_we0 : STD_LOGIC;
    signal yi_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal yi_ce1 : STD_LOGIC;
    signal yi_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal yq_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal yq_ce0 : STD_LOGIC;
    signal yq_we0 : STD_LOGIC;
    signal yq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal yq_ce1 : STD_LOGIC;
    signal yq_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pgd_f32_fu_290_ap_start : STD_LOGIC;
    signal grp_pgd_f32_fu_290_ap_done : STD_LOGIC;
    signal grp_pgd_f32_fu_290_ap_idle : STD_LOGIC;
    signal grp_pgd_f32_fu_290_ap_ready : STD_LOGIC;
    signal grp_pgd_f32_fu_290_y_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pgd_f32_fu_290_y_ce0 : STD_LOGIC;
    signal grp_pgd_f32_fu_290_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pgd_f32_fu_290_x_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pgd_f32_fu_290_x_out_ce0 : STD_LOGIC;
    signal grp_pgd_f32_fu_290_x_out_we0 : STD_LOGIC;
    signal grp_pgd_f32_fu_290_x_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_ap_start : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_ap_done : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_ap_idle : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_ap_ready : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_0_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_1_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_2_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_3_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_4_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_5_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_6_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_7_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_8_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_9_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_10_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_11_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_12_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_13_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_14_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_A_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_A_15_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_B_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_B_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_B_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_B_ce1 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_B_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_C_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_1_fu_328_C_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_C_we0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_1_fu_328_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_fu_366_ap_start : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_ap_done : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_ap_idle : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_ap_ready : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_B_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_MAT_VEC_MUL_fu_366_B_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_fu_366_B_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_MAT_VEC_MUL_fu_366_B_ce1 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_B_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MAT_VEC_MUL_fu_366_C_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MAT_VEC_MUL_fu_366_C_ce0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_C_we0 : STD_LOGIC;
    signal grp_MAT_VEC_MUL_fu_366_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_MAX_1_fu_388_ap_start : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_ap_done : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_ap_idle : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_ap_ready : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MAX_1_fu_388_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_V1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MAX_1_fu_388_V1_ce1 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_V1_we1 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_1_fu_388_V1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_VEC_SCALAR_MAX_fu_394_ap_start : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_394_ap_done : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_394_ap_idle : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_394_ap_ready : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_394_V1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_VEC_SCALAR_MAX_fu_394_V1_ce0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_394_V1_we0 : STD_LOGIC;
    signal grp_VEC_SCALAR_MAX_fu_394_V1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_257 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_i_reg_268 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_0_i5_reg_279 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_pgd_f32_fu_290_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_MAT_VEC_MUL_1_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_MAT_VEC_MUL_fu_366_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_VEC_SCALAR_MAX_1_fu_388_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_VEC_SCALAR_MAX_fu_394_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal zext_ln127_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln253_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln127_fu_432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln253_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln253_fu_474_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln253_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_block_state8_on_subcall_done : BOOLEAN;

    component pgd_f32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_out_ce0 : OUT STD_LOGIC;
        x_out_we0 : OUT STD_LOGIC;
        x_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_VEC_MUL_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_4_ce0 : OUT STD_LOGIC;
        A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_5_ce0 : OUT STD_LOGIC;
        A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_6_ce0 : OUT STD_LOGIC;
        A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_7_ce0 : OUT STD_LOGIC;
        A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_8_ce0 : OUT STD_LOGIC;
        A_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_9_ce0 : OUT STD_LOGIC;
        A_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_10_ce0 : OUT STD_LOGIC;
        A_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_11_ce0 : OUT STD_LOGIC;
        A_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_12_ce0 : OUT STD_LOGIC;
        A_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_13_ce0 : OUT STD_LOGIC;
        A_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_14_ce0 : OUT STD_LOGIC;
        A_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_15_ce0 : OUT STD_LOGIC;
        A_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MAT_VEC_MUL IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SCALAR_MAX_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce1 : OUT STD_LOGIC;
        V1_we1 : OUT STD_LOGIC;
        V1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VEC_SCALAR_MAX IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V1_ce0 : OUT STD_LOGIC;
        V1_we0 : OUT STD_LOGIC;
        V1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_accel_fdiv_32kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_accel_fcmp_32fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_13 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_14 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_DCTinvM_15 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pgd_f32_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_xi_dct IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csdr_pgd_yi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DCTinvM_0_U : component csdr_pgd_DCTinvM_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_0_address0,
        ce0 => DCTinvM_0_ce0,
        q0 => DCTinvM_0_q0);

    DCTinvM_1_U : component csdr_pgd_DCTinvM_1
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_1_address0,
        ce0 => DCTinvM_1_ce0,
        q0 => DCTinvM_1_q0);

    DCTinvM_2_U : component csdr_pgd_DCTinvM_2
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_2_address0,
        ce0 => DCTinvM_2_ce0,
        q0 => DCTinvM_2_q0);

    DCTinvM_3_U : component csdr_pgd_DCTinvM_3
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_3_address0,
        ce0 => DCTinvM_3_ce0,
        q0 => DCTinvM_3_q0);

    DCTinvM_4_U : component csdr_pgd_DCTinvM_4
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_4_address0,
        ce0 => DCTinvM_4_ce0,
        q0 => DCTinvM_4_q0);

    DCTinvM_5_U : component csdr_pgd_DCTinvM_5
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_5_address0,
        ce0 => DCTinvM_5_ce0,
        q0 => DCTinvM_5_q0);

    DCTinvM_6_U : component csdr_pgd_DCTinvM_6
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_6_address0,
        ce0 => DCTinvM_6_ce0,
        q0 => DCTinvM_6_q0);

    DCTinvM_7_U : component csdr_pgd_DCTinvM_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_7_address0,
        ce0 => DCTinvM_7_ce0,
        q0 => DCTinvM_7_q0);

    DCTinvM_8_U : component csdr_pgd_DCTinvM_8
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_8_address0,
        ce0 => DCTinvM_8_ce0,
        q0 => DCTinvM_8_q0);

    DCTinvM_9_U : component csdr_pgd_DCTinvM_9
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_9_address0,
        ce0 => DCTinvM_9_ce0,
        q0 => DCTinvM_9_q0);

    DCTinvM_10_U : component csdr_pgd_DCTinvM_10
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_10_address0,
        ce0 => DCTinvM_10_ce0,
        q0 => DCTinvM_10_q0);

    DCTinvM_11_U : component csdr_pgd_DCTinvM_11
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_11_address0,
        ce0 => DCTinvM_11_ce0,
        q0 => DCTinvM_11_q0);

    DCTinvM_12_U : component csdr_pgd_DCTinvM_12
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_12_address0,
        ce0 => DCTinvM_12_ce0,
        q0 => DCTinvM_12_q0);

    DCTinvM_13_U : component csdr_pgd_DCTinvM_13
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_13_address0,
        ce0 => DCTinvM_13_ce0,
        q0 => DCTinvM_13_q0);

    DCTinvM_14_U : component csdr_pgd_DCTinvM_14
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_14_address0,
        ce0 => DCTinvM_14_ce0,
        q0 => DCTinvM_14_q0);

    DCTinvM_15_U : component csdr_pgd_DCTinvM_15
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_MAT_VEC_MUL_1_fu_328_A_15_address0,
        ce0 => DCTinvM_15_ce0,
        q0 => DCTinvM_15_q0);

    xi_U : component pgd_f32_x
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xi_address0,
        ce0 => xi_ce0,
        we0 => xi_we0,
        d0 => grp_pgd_f32_fu_290_x_out_d0,
        q0 => xi_q0,
        address1 => grp_MAT_VEC_MUL_1_fu_328_B_address1,
        ce1 => xi_ce1,
        q1 => xi_q1);

    xq_U : component pgd_f32_x
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xq_address0,
        ce0 => xq_ce0,
        we0 => xq_we0,
        d0 => grp_pgd_f32_fu_290_x_out_d0,
        q0 => xq_q0,
        address1 => grp_MAT_VEC_MUL_1_fu_328_B_address1,
        ce1 => xq_ce1,
        q1 => xq_q1);

    xi_dct_U : component csdr_pgd_xi_dct
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xi_dct_address0,
        ce0 => xi_dct_ce0,
        we0 => xi_dct_we0,
        d0 => xi_dct_d0,
        q0 => xi_dct_q0);

    xq_dct_U : component csdr_pgd_xi_dct
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xq_dct_address0,
        ce0 => xq_dct_ce0,
        we0 => xq_dct_we0,
        d0 => grp_MAT_VEC_MUL_1_fu_328_C_d0,
        q0 => xq_dct_q0);

    Atyi_U : component csdr_pgd_xi_dct
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Atyi_address0,
        ce0 => Atyi_ce0,
        we0 => Atyi_we0,
        d0 => grp_MAT_VEC_MUL_fu_366_C_d0,
        q0 => Atyi_q0);

    Atyq_U : component csdr_pgd_xi_dct
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Atyq_address0,
        ce0 => Atyq_ce0,
        we0 => Atyq_we0,
        d0 => grp_MAT_VEC_MUL_fu_366_C_d0,
        q0 => Atyq_q0);

    yi_U : component csdr_pgd_yi
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => yi_address0,
        ce0 => yi_ce0,
        we0 => yi_we0,
        d0 => y_q0,
        q0 => yi_q0,
        address1 => grp_MAT_VEC_MUL_fu_366_B_address1,
        ce1 => yi_ce1,
        q1 => yi_q1);

    yq_U : component csdr_pgd_yi
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => yq_address0,
        ce0 => yq_ce0,
        we0 => yq_we0,
        d0 => y_q1,
        q0 => yq_q0,
        address1 => grp_MAT_VEC_MUL_fu_366_B_address1,
        ce1 => yq_ce1,
        q1 => yq_q1);

    grp_pgd_f32_fu_290 : component pgd_f32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pgd_f32_fu_290_ap_start,
        ap_done => grp_pgd_f32_fu_290_ap_done,
        ap_idle => grp_pgd_f32_fu_290_ap_idle,
        ap_ready => grp_pgd_f32_fu_290_ap_ready,
        y_address0 => grp_pgd_f32_fu_290_y_address0,
        y_ce0 => grp_pgd_f32_fu_290_y_ce0,
        y_q0 => grp_pgd_f32_fu_290_y_q0,
        x_out_address0 => grp_pgd_f32_fu_290_x_out_address0,
        x_out_ce0 => grp_pgd_f32_fu_290_x_out_ce0,
        x_out_we0 => grp_pgd_f32_fu_290_x_out_we0,
        x_out_d0 => grp_pgd_f32_fu_290_x_out_d0);

    grp_MAT_VEC_MUL_1_fu_328 : component MAT_VEC_MUL_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_VEC_MUL_1_fu_328_ap_start,
        ap_done => grp_MAT_VEC_MUL_1_fu_328_ap_done,
        ap_idle => grp_MAT_VEC_MUL_1_fu_328_ap_idle,
        ap_ready => grp_MAT_VEC_MUL_1_fu_328_ap_ready,
        A_0_address0 => grp_MAT_VEC_MUL_1_fu_328_A_0_address0,
        A_0_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_0_ce0,
        A_0_q0 => DCTinvM_0_q0,
        A_1_address0 => grp_MAT_VEC_MUL_1_fu_328_A_1_address0,
        A_1_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_1_ce0,
        A_1_q0 => DCTinvM_1_q0,
        A_2_address0 => grp_MAT_VEC_MUL_1_fu_328_A_2_address0,
        A_2_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_2_ce0,
        A_2_q0 => DCTinvM_2_q0,
        A_3_address0 => grp_MAT_VEC_MUL_1_fu_328_A_3_address0,
        A_3_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_3_ce0,
        A_3_q0 => DCTinvM_3_q0,
        A_4_address0 => grp_MAT_VEC_MUL_1_fu_328_A_4_address0,
        A_4_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_4_ce0,
        A_4_q0 => DCTinvM_4_q0,
        A_5_address0 => grp_MAT_VEC_MUL_1_fu_328_A_5_address0,
        A_5_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_5_ce0,
        A_5_q0 => DCTinvM_5_q0,
        A_6_address0 => grp_MAT_VEC_MUL_1_fu_328_A_6_address0,
        A_6_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_6_ce0,
        A_6_q0 => DCTinvM_6_q0,
        A_7_address0 => grp_MAT_VEC_MUL_1_fu_328_A_7_address0,
        A_7_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_7_ce0,
        A_7_q0 => DCTinvM_7_q0,
        A_8_address0 => grp_MAT_VEC_MUL_1_fu_328_A_8_address0,
        A_8_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_8_ce0,
        A_8_q0 => DCTinvM_8_q0,
        A_9_address0 => grp_MAT_VEC_MUL_1_fu_328_A_9_address0,
        A_9_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_9_ce0,
        A_9_q0 => DCTinvM_9_q0,
        A_10_address0 => grp_MAT_VEC_MUL_1_fu_328_A_10_address0,
        A_10_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_10_ce0,
        A_10_q0 => DCTinvM_10_q0,
        A_11_address0 => grp_MAT_VEC_MUL_1_fu_328_A_11_address0,
        A_11_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_11_ce0,
        A_11_q0 => DCTinvM_11_q0,
        A_12_address0 => grp_MAT_VEC_MUL_1_fu_328_A_12_address0,
        A_12_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_12_ce0,
        A_12_q0 => DCTinvM_12_q0,
        A_13_address0 => grp_MAT_VEC_MUL_1_fu_328_A_13_address0,
        A_13_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_13_ce0,
        A_13_q0 => DCTinvM_13_q0,
        A_14_address0 => grp_MAT_VEC_MUL_1_fu_328_A_14_address0,
        A_14_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_14_ce0,
        A_14_q0 => DCTinvM_14_q0,
        A_15_address0 => grp_MAT_VEC_MUL_1_fu_328_A_15_address0,
        A_15_ce0 => grp_MAT_VEC_MUL_1_fu_328_A_15_ce0,
        A_15_q0 => DCTinvM_15_q0,
        B_address0 => grp_MAT_VEC_MUL_1_fu_328_B_address0,
        B_ce0 => grp_MAT_VEC_MUL_1_fu_328_B_ce0,
        B_q0 => grp_MAT_VEC_MUL_1_fu_328_B_q0,
        B_address1 => grp_MAT_VEC_MUL_1_fu_328_B_address1,
        B_ce1 => grp_MAT_VEC_MUL_1_fu_328_B_ce1,
        B_q1 => grp_MAT_VEC_MUL_1_fu_328_B_q1,
        C_address0 => grp_MAT_VEC_MUL_1_fu_328_C_address0,
        C_ce0 => grp_MAT_VEC_MUL_1_fu_328_C_ce0,
        C_we0 => grp_MAT_VEC_MUL_1_fu_328_C_we0,
        C_d0 => grp_MAT_VEC_MUL_1_fu_328_C_d0);

    grp_MAT_VEC_MUL_fu_366 : component MAT_VEC_MUL
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MAT_VEC_MUL_fu_366_ap_start,
        ap_done => grp_MAT_VEC_MUL_fu_366_ap_done,
        ap_idle => grp_MAT_VEC_MUL_fu_366_ap_idle,
        ap_ready => grp_MAT_VEC_MUL_fu_366_ap_ready,
        B_address0 => grp_MAT_VEC_MUL_fu_366_B_address0,
        B_ce0 => grp_MAT_VEC_MUL_fu_366_B_ce0,
        B_q0 => grp_MAT_VEC_MUL_fu_366_B_q0,
        B_address1 => grp_MAT_VEC_MUL_fu_366_B_address1,
        B_ce1 => grp_MAT_VEC_MUL_fu_366_B_ce1,
        B_q1 => grp_MAT_VEC_MUL_fu_366_B_q1,
        C_address0 => grp_MAT_VEC_MUL_fu_366_C_address0,
        C_ce0 => grp_MAT_VEC_MUL_fu_366_C_ce0,
        C_we0 => grp_MAT_VEC_MUL_fu_366_C_we0,
        C_d0 => grp_MAT_VEC_MUL_fu_366_C_d0);

    grp_VEC_SCALAR_MAX_1_fu_388 : component VEC_SCALAR_MAX_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SCALAR_MAX_1_fu_388_ap_start,
        ap_done => grp_VEC_SCALAR_MAX_1_fu_388_ap_done,
        ap_idle => grp_VEC_SCALAR_MAX_1_fu_388_ap_idle,
        ap_ready => grp_VEC_SCALAR_MAX_1_fu_388_ap_ready,
        V1_address0 => grp_VEC_SCALAR_MAX_1_fu_388_V1_address0,
        V1_ce0 => grp_VEC_SCALAR_MAX_1_fu_388_V1_ce0,
        V1_q0 => xd_q0,
        V1_address1 => grp_VEC_SCALAR_MAX_1_fu_388_V1_address1,
        V1_ce1 => grp_VEC_SCALAR_MAX_1_fu_388_V1_ce1,
        V1_we1 => grp_VEC_SCALAR_MAX_1_fu_388_V1_we1,
        V1_d1 => grp_VEC_SCALAR_MAX_1_fu_388_V1_d1);

    grp_VEC_SCALAR_MAX_fu_394 : component VEC_SCALAR_MAX
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_VEC_SCALAR_MAX_fu_394_ap_start,
        ap_done => grp_VEC_SCALAR_MAX_fu_394_ap_done,
        ap_idle => grp_VEC_SCALAR_MAX_fu_394_ap_idle,
        ap_ready => grp_VEC_SCALAR_MAX_fu_394_ap_ready,
        V1_address0 => grp_VEC_SCALAR_MAX_fu_394_V1_address0,
        V1_ce0 => grp_VEC_SCALAR_MAX_fu_394_V1_ce0,
        V1_we0 => grp_VEC_SCALAR_MAX_fu_394_V1_we0,
        V1_d0 => grp_VEC_SCALAR_MAX_fu_394_V1_d0,
        V1_q0 => xd_q0);

    HLS_accel_fdiv_32kbM_U89 : component HLS_accel_fdiv_32kbM
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xq_dct_load_reg_593,
        din1 => reg_409,
        ce => ap_const_logic_1,
        dout => grp_fu_400_p2);

    HLS_accel_fcmp_32fYi_U90 : component HLS_accel_fcmp_32fYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_409,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_404_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_MAT_VEC_MUL_1_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_VEC_MUL_1_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_MAT_VEC_MUL_1_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MAT_VEC_MUL_1_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_MAT_VEC_MUL_1_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MAT_VEC_MUL_fu_366_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MAT_VEC_MUL_fu_366_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln125_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_MAT_VEC_MUL_fu_366_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MAT_VEC_MUL_fu_366_ap_ready = ap_const_logic_1)) then 
                    grp_MAT_VEC_MUL_fu_366_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SCALAR_MAX_1_fu_388_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SCALAR_MAX_1_fu_388_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                    grp_VEC_SCALAR_MAX_1_fu_388_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SCALAR_MAX_1_fu_388_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SCALAR_MAX_1_fu_388_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_VEC_SCALAR_MAX_fu_394_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_VEC_SCALAR_MAX_fu_394_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln258_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_VEC_SCALAR_MAX_fu_394_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_VEC_SCALAR_MAX_fu_394_ap_ready = ap_const_logic_1)) then 
                    grp_VEC_SCALAR_MAX_fu_394_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pgd_f32_fu_290_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pgd_f32_fu_290_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_pgd_f32_fu_290_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pgd_f32_fu_290_ap_ready = ap_const_logic_1)) then 
                    grp_pgd_f32_fu_290_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i5_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_fu_443_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_i5_reg_279 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_0_i5_reg_279 <= i_3_reg_573;
            end if; 
        end if;
    end process;

    i_0_i_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_i_reg_268 <= i_2_reg_555;
            elsif (((grp_MAT_VEC_MUL_1_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_i_reg_268 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_257 <= i_reg_531;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_257 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_2_reg_555 <= i_2_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_3_reg_573 <= i_3_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_531 <= i_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_409 <= xi_dct_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_1_reg_565 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                tmp_i6_reg_598 <= grp_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                xi_dct_addr_reg_560 <= zext_ln253_fu_455_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                xq_dct_load_reg_593 <= xq_dct_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln126_reg_536(3 downto 0) <= zext_ln126_fu_427_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln258_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    zext_ln259_reg_578(4 downto 0) <= zext_ln259_fu_522_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln126_reg_536(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln259_reg_578(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln125_fu_415_p2, ap_CS_fsm_state11, icmp_ln252_fu_443_p2, ap_CS_fsm_state17, icmp_ln258_fu_510_p2, grp_MAT_VEC_MUL_1_fu_328_ap_done, grp_MAT_VEC_MUL_fu_366_ap_done, grp_VEC_SCALAR_MAX_1_fu_388_ap_done, grp_VEC_SCALAR_MAX_fu_394_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state52, ap_CS_fsm_state50, ap_block_state6_on_subcall_done, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln125_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_MAT_VEC_MUL_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_MAT_VEC_MUL_1_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln252_fu_443_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln258_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state50 => 
                if (((grp_VEC_SCALAR_MAX_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((grp_VEC_SCALAR_MAX_1_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Atyi_address0_assign_proc : process(grp_pgd_f32_fu_290_y_address0, grp_MAT_VEC_MUL_fu_366_C_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Atyi_address0 <= grp_MAT_VEC_MUL_fu_366_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Atyi_address0 <= grp_pgd_f32_fu_290_y_address0;
        else 
            Atyi_address0 <= "XXXX";
        end if; 
    end process;


    Atyi_ce0_assign_proc : process(grp_pgd_f32_fu_290_y_ce0, grp_MAT_VEC_MUL_fu_366_C_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Atyi_ce0 <= grp_MAT_VEC_MUL_fu_366_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Atyi_ce0 <= grp_pgd_f32_fu_290_y_ce0;
        else 
            Atyi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Atyi_we0_assign_proc : process(grp_MAT_VEC_MUL_fu_366_C_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Atyi_we0 <= grp_MAT_VEC_MUL_fu_366_C_we0;
        else 
            Atyi_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Atyq_address0_assign_proc : process(grp_pgd_f32_fu_290_y_address0, grp_MAT_VEC_MUL_fu_366_C_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Atyq_address0 <= grp_MAT_VEC_MUL_fu_366_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Atyq_address0 <= grp_pgd_f32_fu_290_y_address0;
        else 
            Atyq_address0 <= "XXXX";
        end if; 
    end process;


    Atyq_ce0_assign_proc : process(grp_pgd_f32_fu_290_y_ce0, grp_MAT_VEC_MUL_fu_366_C_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Atyq_ce0 <= grp_MAT_VEC_MUL_fu_366_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Atyq_ce0 <= grp_pgd_f32_fu_290_y_ce0;
        else 
            Atyq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Atyq_we0_assign_proc : process(grp_MAT_VEC_MUL_fu_366_C_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Atyq_we0 <= grp_MAT_VEC_MUL_fu_366_C_we0;
        else 
            Atyq_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_0_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_0_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_0_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_0_ce0;
        else 
            DCTinvM_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_10_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_10_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_10_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_10_ce0;
        else 
            DCTinvM_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_11_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_11_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_11_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_11_ce0;
        else 
            DCTinvM_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_12_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_12_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_12_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_12_ce0;
        else 
            DCTinvM_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_13_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_13_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_13_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_13_ce0;
        else 
            DCTinvM_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_14_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_14_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_14_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_14_ce0;
        else 
            DCTinvM_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_15_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_15_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_15_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_15_ce0;
        else 
            DCTinvM_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_1_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_1_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_1_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_1_ce0;
        else 
            DCTinvM_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_2_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_2_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_2_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_2_ce0;
        else 
            DCTinvM_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_3_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_3_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_3_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_3_ce0;
        else 
            DCTinvM_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_4_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_4_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_4_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_4_ce0;
        else 
            DCTinvM_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_5_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_5_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_5_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_5_ce0;
        else 
            DCTinvM_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_6_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_6_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_6_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_6_ce0;
        else 
            DCTinvM_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_7_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_7_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_7_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_7_ce0;
        else 
            DCTinvM_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_8_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_8_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_8_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_8_ce0;
        else 
            DCTinvM_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DCTinvM_9_ce0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_A_9_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DCTinvM_9_ce0 <= grp_MAT_VEC_MUL_1_fu_328_A_9_ce0;
        else 
            DCTinvM_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln253_fu_496_p2 <= (tmp_1_reg_565 and or_ln253_fu_490_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state6_on_subcall_done_assign_proc : process(grp_pgd_f32_fu_290_ap_done, grp_MAT_VEC_MUL_fu_366_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_MAT_VEC_MUL_fu_366_ap_done = ap_const_logic_0) or (grp_pgd_f32_fu_290_ap_done = ap_const_logic_0));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_pgd_f32_fu_290_ap_done, grp_MAT_VEC_MUL_1_fu_328_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_MAT_VEC_MUL_1_fu_328_ap_done = ap_const_logic_0) or (grp_pgd_f32_fu_290_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_VEC_SCALAR_MAX_1_fu_388_ap_done, ap_CS_fsm_state52)
    begin
        if ((((grp_VEC_SCALAR_MAX_1_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_VEC_SCALAR_MAX_1_fu_388_ap_done, ap_CS_fsm_state52)
    begin
        if (((grp_VEC_SCALAR_MAX_1_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln253_fu_460_p1 <= reg_409;

    grp_MAT_VEC_MUL_1_fu_328_B_q0_assign_proc : process(xi_q0, xq_q0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_MAT_VEC_MUL_1_fu_328_B_q0 <= xq_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_MAT_VEC_MUL_1_fu_328_B_q0 <= xi_q0;
        else 
            grp_MAT_VEC_MUL_1_fu_328_B_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MAT_VEC_MUL_1_fu_328_B_q1_assign_proc : process(xi_q1, xq_q1, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_MAT_VEC_MUL_1_fu_328_B_q1 <= xq_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_MAT_VEC_MUL_1_fu_328_B_q1 <= xi_q1;
        else 
            grp_MAT_VEC_MUL_1_fu_328_B_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_MAT_VEC_MUL_1_fu_328_ap_start <= grp_MAT_VEC_MUL_1_fu_328_ap_start_reg;

    grp_MAT_VEC_MUL_fu_366_B_q0_assign_proc : process(yi_q0, yq_q0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_MAT_VEC_MUL_fu_366_B_q0 <= yq_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_MAT_VEC_MUL_fu_366_B_q0 <= yi_q0;
        else 
            grp_MAT_VEC_MUL_fu_366_B_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MAT_VEC_MUL_fu_366_B_q1_assign_proc : process(yi_q1, yq_q1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_MAT_VEC_MUL_fu_366_B_q1 <= yq_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_MAT_VEC_MUL_fu_366_B_q1 <= yi_q1;
        else 
            grp_MAT_VEC_MUL_fu_366_B_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_MAT_VEC_MUL_fu_366_ap_start <= grp_MAT_VEC_MUL_fu_366_ap_start_reg;
    grp_VEC_SCALAR_MAX_1_fu_388_ap_start <= grp_VEC_SCALAR_MAX_1_fu_388_ap_start_reg;
    grp_VEC_SCALAR_MAX_fu_394_ap_start <= grp_VEC_SCALAR_MAX_fu_394_ap_start_reg;
    grp_pgd_f32_fu_290_ap_start <= grp_pgd_f32_fu_290_ap_start_reg;

    grp_pgd_f32_fu_290_y_q0_assign_proc : process(Atyi_q0, Atyq_q0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_pgd_f32_fu_290_y_q0 <= Atyq_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_pgd_f32_fu_290_y_q0 <= Atyi_q0;
        else 
            grp_pgd_f32_fu_290_y_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_449_p2 <= std_logic_vector(unsigned(i_0_i_reg_268) + unsigned(ap_const_lv5_1));
    i_3_fu_516_p2 <= std_logic_vector(unsigned(i_0_i5_reg_279) + unsigned(ap_const_lv5_1));
    i_fu_421_p2 <= std_logic_vector(unsigned(i_0_reg_257) + unsigned(ap_const_lv4_1));
    icmp_ln125_fu_415_p2 <= "1" when (i_0_reg_257 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_443_p2 <= "1" when (i_0_i_reg_268 = ap_const_lv5_10) else "0";
    icmp_ln253_1_fu_484_p2 <= "1" when (trunc_ln253_fu_474_p1 = ap_const_lv23_0) else "0";
    icmp_ln253_fu_478_p2 <= "0" when (tmp_fu_464_p4 = ap_const_lv8_FF) else "1";
    icmp_ln258_fu_510_p2 <= "1" when (i_0_i5_reg_279 = ap_const_lv5_10) else "0";
    or_ln253_fu_490_p2 <= (icmp_ln253_fu_478_p2 or icmp_ln253_1_fu_484_p2);
    select_ln253_fu_501_p3 <= 
        ap_const_lv32_3F800000 when (and_ln253_fu_496_p2(0) = '1') else 
        reg_409;
    tmp_fu_464_p4 <= bitcast_ln253_fu_460_p1(30 downto 23);
    trunc_ln253_fu_474_p1 <= bitcast_ln253_fu_460_p1(23 - 1 downto 0);

    xd_address0_assign_proc : process(zext_ln259_reg_578, grp_VEC_SCALAR_MAX_1_fu_388_V1_address0, grp_VEC_SCALAR_MAX_fu_394_V1_address0, ap_CS_fsm_state49, ap_CS_fsm_state52, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            xd_address0 <= zext_ln259_reg_578(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            xd_address0 <= grp_VEC_SCALAR_MAX_fu_394_V1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            xd_address0 <= grp_VEC_SCALAR_MAX_1_fu_388_V1_address0;
        else 
            xd_address0 <= "XXXX";
        end if; 
    end process;

    xd_address1 <= grp_VEC_SCALAR_MAX_1_fu_388_V1_address1;

    xd_ce0_assign_proc : process(grp_VEC_SCALAR_MAX_1_fu_388_V1_ce0, grp_VEC_SCALAR_MAX_fu_394_V1_ce0, ap_CS_fsm_state49, ap_CS_fsm_state52, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            xd_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            xd_ce0 <= grp_VEC_SCALAR_MAX_fu_394_V1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            xd_ce0 <= grp_VEC_SCALAR_MAX_1_fu_388_V1_ce0;
        else 
            xd_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xd_ce1_assign_proc : process(grp_VEC_SCALAR_MAX_1_fu_388_V1_ce1, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            xd_ce1 <= grp_VEC_SCALAR_MAX_1_fu_388_V1_ce1;
        else 
            xd_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xd_d0_assign_proc : process(tmp_i6_reg_598, grp_VEC_SCALAR_MAX_fu_394_V1_d0, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            xd_d0 <= tmp_i6_reg_598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            xd_d0 <= grp_VEC_SCALAR_MAX_fu_394_V1_d0;
        else 
            xd_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    xd_d1 <= grp_VEC_SCALAR_MAX_1_fu_388_V1_d1;

    xd_we0_assign_proc : process(grp_VEC_SCALAR_MAX_fu_394_V1_we0, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            xd_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            xd_we0 <= grp_VEC_SCALAR_MAX_fu_394_V1_we0;
        else 
            xd_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xd_we1_assign_proc : process(grp_VEC_SCALAR_MAX_1_fu_388_V1_we1, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            xd_we1 <= grp_VEC_SCALAR_MAX_1_fu_388_V1_we1;
        else 
            xd_we1 <= ap_const_logic_0;
        end if; 
    end process;


    xi_address0_assign_proc : process(grp_pgd_f32_fu_290_x_out_address0, grp_MAT_VEC_MUL_1_fu_328_B_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_address0 <= grp_MAT_VEC_MUL_1_fu_328_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xi_address0 <= grp_pgd_f32_fu_290_x_out_address0;
        else 
            xi_address0 <= "XXXX";
        end if; 
    end process;


    xi_ce0_assign_proc : process(grp_pgd_f32_fu_290_x_out_ce0, grp_MAT_VEC_MUL_1_fu_328_B_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_ce0 <= grp_MAT_VEC_MUL_1_fu_328_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xi_ce0 <= grp_pgd_f32_fu_290_x_out_ce0;
        else 
            xi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xi_ce1_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_B_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_ce1 <= grp_MAT_VEC_MUL_1_fu_328_B_ce1;
        else 
            xi_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xi_dct_address0_assign_proc : process(ap_CS_fsm_state11, xi_dct_addr_reg_560, ap_CS_fsm_state17, zext_ln259_fu_522_p1, grp_MAT_VEC_MUL_1_fu_328_C_address0, ap_CS_fsm_state16, ap_CS_fsm_state8, zext_ln253_fu_455_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xi_dct_address0 <= zext_ln259_fu_522_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xi_dct_address0 <= xi_dct_addr_reg_560;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xi_dct_address0 <= zext_ln253_fu_455_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_dct_address0 <= grp_MAT_VEC_MUL_1_fu_328_C_address0;
        else 
            xi_dct_address0 <= "XXXX";
        end if; 
    end process;


    xi_dct_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state17, grp_MAT_VEC_MUL_1_fu_328_C_ce0, ap_CS_fsm_state16, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            xi_dct_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_dct_ce0 <= grp_MAT_VEC_MUL_1_fu_328_C_ce0;
        else 
            xi_dct_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xi_dct_d0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_C_d0, ap_CS_fsm_state16, ap_CS_fsm_state8, select_ln253_fu_501_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xi_dct_d0 <= select_ln253_fu_501_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_dct_d0 <= grp_MAT_VEC_MUL_1_fu_328_C_d0;
        else 
            xi_dct_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xi_dct_we0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_C_we0, ap_CS_fsm_state16, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xi_dct_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xi_dct_we0 <= grp_MAT_VEC_MUL_1_fu_328_C_we0;
        else 
            xi_dct_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xi_we0_assign_proc : process(grp_pgd_f32_fu_290_x_out_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xi_we0 <= grp_pgd_f32_fu_290_x_out_we0;
        else 
            xi_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln127_fu_432_p2 <= (i_0_reg_257 xor ap_const_lv4_8);

    xq_address0_assign_proc : process(grp_pgd_f32_fu_290_x_out_address0, grp_MAT_VEC_MUL_1_fu_328_B_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xq_address0 <= grp_MAT_VEC_MUL_1_fu_328_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xq_address0 <= grp_pgd_f32_fu_290_x_out_address0;
        else 
            xq_address0 <= "XXXX";
        end if; 
    end process;


    xq_ce0_assign_proc : process(grp_pgd_f32_fu_290_x_out_ce0, grp_MAT_VEC_MUL_1_fu_328_B_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xq_ce0 <= grp_MAT_VEC_MUL_1_fu_328_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xq_ce0 <= grp_pgd_f32_fu_290_x_out_ce0;
        else 
            xq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xq_ce1_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_B_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xq_ce1 <= grp_MAT_VEC_MUL_1_fu_328_B_ce1;
        else 
            xq_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xq_dct_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln259_fu_522_p1, grp_MAT_VEC_MUL_1_fu_328_C_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xq_dct_address0 <= zext_ln259_fu_522_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xq_dct_address0 <= grp_MAT_VEC_MUL_1_fu_328_C_address0;
        else 
            xq_dct_address0 <= "XXXX";
        end if; 
    end process;


    xq_dct_ce0_assign_proc : process(ap_CS_fsm_state17, grp_MAT_VEC_MUL_1_fu_328_C_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xq_dct_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xq_dct_ce0 <= grp_MAT_VEC_MUL_1_fu_328_C_ce0;
        else 
            xq_dct_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xq_dct_we0_assign_proc : process(grp_MAT_VEC_MUL_1_fu_328_C_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xq_dct_we0 <= grp_MAT_VEC_MUL_1_fu_328_C_we0;
        else 
            xq_dct_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xq_we0_assign_proc : process(grp_pgd_f32_fu_290_x_out_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xq_we0 <= grp_pgd_f32_fu_290_x_out_we0;
        else 
            xq_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_address0 <= zext_ln126_fu_427_p1(4 - 1 downto 0);
    y_address1 <= zext_ln127_fu_438_p1(4 - 1 downto 0);

    y_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_ce1 <= ap_const_logic_1;
        else 
            y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    yi_address0_assign_proc : process(zext_ln126_reg_536, grp_MAT_VEC_MUL_fu_366_B_address0, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yi_address0 <= zext_ln126_reg_536(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            yi_address0 <= grp_MAT_VEC_MUL_fu_366_B_address0;
        else 
            yi_address0 <= "XXX";
        end if; 
    end process;


    yi_ce0_assign_proc : process(grp_MAT_VEC_MUL_fu_366_B_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yi_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            yi_ce0 <= grp_MAT_VEC_MUL_fu_366_B_ce0;
        else 
            yi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    yi_ce1_assign_proc : process(grp_MAT_VEC_MUL_fu_366_B_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            yi_ce1 <= grp_MAT_VEC_MUL_fu_366_B_ce1;
        else 
            yi_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    yi_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yi_we0 <= ap_const_logic_1;
        else 
            yi_we0 <= ap_const_logic_0;
        end if; 
    end process;


    yq_address0_assign_proc : process(zext_ln126_reg_536, grp_MAT_VEC_MUL_fu_366_B_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yq_address0 <= zext_ln126_reg_536(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            yq_address0 <= grp_MAT_VEC_MUL_fu_366_B_address0;
        else 
            yq_address0 <= "XXX";
        end if; 
    end process;


    yq_ce0_assign_proc : process(grp_MAT_VEC_MUL_fu_366_B_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yq_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            yq_ce0 <= grp_MAT_VEC_MUL_fu_366_B_ce0;
        else 
            yq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    yq_ce1_assign_proc : process(grp_MAT_VEC_MUL_fu_366_B_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            yq_ce1 <= grp_MAT_VEC_MUL_fu_366_B_ce1;
        else 
            yq_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    yq_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yq_we0 <= ap_const_logic_1;
        else 
            yq_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln126_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_257),64));
    zext_ln127_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln127_fu_432_p2),64));
    zext_ln253_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_268),64));
    zext_ln259_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_279),64));
end behav;
