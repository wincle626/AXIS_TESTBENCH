-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PIDS is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputs_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs_TVALID : IN STD_LOGIC;
    inputs_TREADY : OUT STD_LOGIC;
    outputs_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputs_TVALID : OUT STD_LOGIC;
    outputs_TREADY : IN STD_LOGIC );
end;


architecture behav of PIDS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PIDS_PIDS,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.443400,HLS_SYN_LAT=142,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2574,HLS_SYN_LUT=2059,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal inputfifo_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal setpoint_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inputfifo_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dt_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal X_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal I_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal PID_1_1_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Kp_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Kd_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal P_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_1_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal PID_1_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_1_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal I_1_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputfifo_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal inputfifo_ce0 : STD_LOGIC;
    signal inputfifo_we0 : STD_LOGIC;
    signal inputfifo_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal inputfifo_ce1 : STD_LOGIC;
    signal outputfifo_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal outputfifo_ce0 : STD_LOGIC;
    signal outputfifo_we0 : STD_LOGIC;
    signal outputfifo_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputfifo_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputfifo_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal outputfifo_ce1 : STD_LOGIC;
    signal outputfifo_we1 : STD_LOGIC;
    signal outputfifo_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_done : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_idle : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_ready : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputs_TREADY : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_ce0 : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_we0 : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MEP_fu_203_ap_start : STD_LOGIC;
    signal grp_MEP_fu_203_ap_done : STD_LOGIC;
    signal grp_MEP_fu_203_ap_idle : STD_LOGIC;
    signal grp_MEP_fu_203_ap_ready : STD_LOGIC;
    signal grp_MEP_fu_203_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MEP_fu_203_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MEP_fu_203_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MEP_fu_203_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MEP_fu_203_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MEP_fu_203_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_done : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_idle : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_ready : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TREADY : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_ce0 : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TVALID : STD_LOGIC;
    signal grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_MEP_fu_203_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal regslice_both_outputs_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal regslice_both_inputs_U_apdone_blk : STD_LOGIC;
    signal inputs_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs_TVALID_int_regslice : STD_LOGIC;
    signal inputs_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_inputs_U_ack_in : STD_LOGIC;
    signal outputs_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outputs_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component PIDS_PIDS_Pipeline_VITIS_LOOP_11_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputs_TVALID : IN STD_LOGIC;
        inputs_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_TREADY : OUT STD_LOGIC;
        inputfifo_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        inputfifo_ce0 : OUT STD_LOGIC;
        inputfifo_we0 : OUT STD_LOGIC;
        inputfifo_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PIDS_MEP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        setpoint : IN STD_LOGIC_VECTOR (31 downto 0);
        dt : IN STD_LOGIC_VECTOR (31 downto 0);
        prevX_read : IN STD_LOGIC_VECTOR (31 downto 0);
        prevE_read : IN STD_LOGIC_VECTOR (31 downto 0);
        prevI_read : IN STD_LOGIC_VECTOR (31 downto 0);
        prevPID_read : IN STD_LOGIC_VECTOR (31 downto 0);
        Kp : IN STD_LOGIC_VECTOR (31 downto 0);
        Ki : IN STD_LOGIC_VECTOR (31 downto 0);
        Kd : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PIDS_PIDS_Pipeline_VITIS_LOOP_36_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_TREADY : IN STD_LOGIC;
        outputfifo_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        outputfifo_ce0 : OUT STD_LOGIC;
        outputfifo_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs_TVALID : OUT STD_LOGIC );
    end component;


    component PIDS_inputfifo_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PIDS_outputfifo_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PIDS_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    inputfifo_U : component PIDS_inputfifo_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => inputfifo_address0,
        ce0 => inputfifo_ce0,
        we0 => inputfifo_we0,
        d0 => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_d0,
        q0 => inputfifo_q0,
        address1 => inputfifo_address1,
        ce1 => inputfifo_ce1,
        q1 => inputfifo_q1);

    outputfifo_U : component PIDS_outputfifo_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => outputfifo_address0,
        ce0 => outputfifo_ce0,
        we0 => outputfifo_we0,
        d0 => outputfifo_d0,
        q0 => outputfifo_q0,
        address1 => outputfifo_address1,
        ce1 => outputfifo_ce1,
        we1 => outputfifo_we1,
        d1 => outputfifo_d1);

    grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196 : component PIDS_PIDS_Pipeline_VITIS_LOOP_11_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start,
        ap_done => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_done,
        ap_idle => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_idle,
        ap_ready => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_ready,
        inputs_TVALID => inputs_TVALID_int_regslice,
        inputs_TDATA => inputs_TDATA_int_regslice,
        inputs_TREADY => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputs_TREADY,
        inputfifo_address0 => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_address0,
        inputfifo_ce0 => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_ce0,
        inputfifo_we0 => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_we0,
        inputfifo_d0 => grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_d0);

    grp_MEP_fu_203 : component PIDS_MEP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_MEP_fu_203_ap_start,
        ap_done => grp_MEP_fu_203_ap_done,
        ap_idle => grp_MEP_fu_203_ap_idle,
        ap_ready => grp_MEP_fu_203_ap_ready,
        setpoint => setpoint_reg_252,
        dt => dt_reg_267,
        prevX_read => X_reg_272,
        prevE_read => E_reg_287,
        prevI_read => I_reg_292,
        prevPID_read => PID_1_1_reg_307,
        Kp => Kp_reg_312,
        Ki => Ki_reg_327,
        Kd => Kd_reg_332,
        ap_return_0 => grp_MEP_fu_203_ap_return_0,
        ap_return_1 => grp_MEP_fu_203_ap_return_1,
        ap_return_2 => grp_MEP_fu_203_ap_return_2,
        ap_return_3 => grp_MEP_fu_203_ap_return_3,
        ap_return_4 => grp_MEP_fu_203_ap_return_4,
        ap_return_5 => grp_MEP_fu_203_ap_return_5);

    grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216 : component PIDS_PIDS_Pipeline_VITIS_LOOP_36_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start,
        ap_done => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_done,
        ap_idle => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_idle,
        ap_ready => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_ready,
        outputs_TREADY => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TREADY,
        outputfifo_address0 => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_address0,
        outputfifo_ce0 => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_ce0,
        outputfifo_q0 => outputfifo_q0,
        outputs_TDATA => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TDATA,
        outputs_TVALID => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TVALID);

    regslice_both_inputs_U : component PIDS_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputs_TDATA,
        vld_in => inputs_TVALID,
        ack_in => regslice_both_inputs_U_ack_in,
        data_out => inputs_TDATA_int_regslice,
        vld_out => inputs_TVALID_int_regslice,
        ack_out => inputs_TREADY_int_regslice,
        apdone_blk => regslice_both_inputs_U_apdone_blk);

    regslice_both_outputs_U : component PIDS_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TDATA,
        vld_in => grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TVALID,
        ack_in => outputs_TREADY_int_regslice,
        data_out => outputs_TDATA,
        vld_out => regslice_both_outputs_U_vld_out,
        ack_out => outputs_TREADY,
        apdone_blk => regslice_both_outputs_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_MEP_fu_203_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_MEP_fu_203_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_MEP_fu_203_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MEP_fu_203_ap_ready = ap_const_logic_1)) then 
                    grp_MEP_fu_203_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_ready = ap_const_logic_1)) then 
                    grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                D_reg_337 <= grp_MEP_fu_203_ap_return_3;
                E_1_reg_357 <= grp_MEP_fu_203_ap_return_4;
                I_1_reg_362 <= grp_MEP_fu_203_ap_return_5;
                PID_1_reg_352 <= grp_MEP_fu_203_ap_return_1;
                P_reg_342 <= grp_MEP_fu_203_ap_return_2;
                X_1_reg_347 <= grp_MEP_fu_203_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                E_reg_287 <= inputfifo_q0;
                I_reg_292 <= inputfifo_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Kd_reg_332 <= inputfifo_q1;
                Ki_reg_327 <= inputfifo_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Kp_reg_312 <= inputfifo_q1;
                PID_1_1_reg_307 <= inputfifo_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                X_reg_272 <= inputfifo_q0;
                dt_reg_267 <= inputfifo_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                setpoint_reg_252 <= inputfifo_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_done, grp_MEP_fu_203_ap_done, grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state17, regslice_both_outputs_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_MEP_fu_203_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (regslice_both_outputs_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_MEP_fu_203_ap_done)
    begin
        if ((grp_MEP_fu_203_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_done)
    begin
        if ((grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(regslice_both_outputs_U_apdone_blk)
    begin
        if ((regslice_both_outputs_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_done)
    begin
        if ((grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state17, regslice_both_outputs_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (regslice_both_outputs_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state17, regslice_both_outputs_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (regslice_both_outputs_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_MEP_fu_203_ap_start <= grp_MEP_fu_203_ap_start_reg;
    grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start <= grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_ap_start_reg;
    grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start <= grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_ap_start_reg;
    grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputs_TREADY <= (outputs_TREADY_int_regslice and ap_CS_fsm_state16);

    inputfifo_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inputfifo_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inputfifo_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inputfifo_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inputfifo_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputfifo_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputfifo_address0 <= grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_address0;
        else 
            inputfifo_address0 <= "XXXX";
        end if; 
    end process;


    inputfifo_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inputfifo_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inputfifo_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inputfifo_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inputfifo_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            inputfifo_address1 <= "XXXX";
        end if; 
    end process;


    inputfifo_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputfifo_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputfifo_ce0 <= grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_ce0;
        else 
            inputfifo_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputfifo_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inputfifo_ce1 <= ap_const_logic_1;
        else 
            inputfifo_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inputfifo_we0_assign_proc : process(grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputfifo_we0 <= grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputfifo_we0;
        else 
            inputfifo_we0 <= ap_const_logic_0;
        end if; 
    end process;

    inputs_TREADY <= regslice_both_inputs_U_ack_in;

    inputs_TREADY_int_regslice_assign_proc : process(grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputs_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputs_TREADY_int_regslice <= grp_PIDS_Pipeline_VITIS_LOOP_11_1_fu_196_inputs_TREADY;
        else 
            inputs_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    outputfifo_address0_assign_proc : process(grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_address0, ap_CS_fsm_state16, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outputfifo_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outputfifo_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outputfifo_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outputfifo_address0 <= grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_address0;
        else 
            outputfifo_address0 <= "XXX";
        end if; 
    end process;


    outputfifo_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outputfifo_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outputfifo_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outputfifo_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            outputfifo_address1 <= "XXX";
        end if; 
    end process;


    outputfifo_ce0_assign_proc : process(grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_ce0, ap_CS_fsm_state16, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            outputfifo_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outputfifo_ce0 <= grp_PIDS_Pipeline_VITIS_LOOP_36_2_fu_216_outputfifo_ce0;
        else 
            outputfifo_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputfifo_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            outputfifo_ce1 <= ap_const_logic_1;
        else 
            outputfifo_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outputfifo_d0_assign_proc : process(D_reg_337, P_reg_342, PID_1_reg_352, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outputfifo_d0 <= PID_1_reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outputfifo_d0 <= D_reg_337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outputfifo_d0 <= P_reg_342;
        else 
            outputfifo_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputfifo_d1_assign_proc : process(X_1_reg_347, E_1_reg_357, I_1_reg_362, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outputfifo_d1 <= X_1_reg_347;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outputfifo_d1 <= I_1_reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outputfifo_d1 <= E_1_reg_357;
        else 
            outputfifo_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputfifo_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            outputfifo_we0 <= ap_const_logic_1;
        else 
            outputfifo_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outputfifo_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            outputfifo_we1 <= ap_const_logic_1;
        else 
            outputfifo_we1 <= ap_const_logic_0;
        end if; 
    end process;

    outputs_TVALID <= regslice_both_outputs_U_vld_out;
end behav;
